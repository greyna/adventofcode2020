use std::cmp::min;

type Operator = fn(u64, u64) -> u64;

fn add(a: u64, b: u64) -> u64 {
    a + b
}

fn multiply(a: u64, b: u64) -> u64 {
    a * b
}

const ADD: Operator = add;
const MULTIPLY: Operator = multiply;

fn parse_operator(input: &str) -> Option<Operator> {
    match input.trim() {
        "+" => Some(add),
        "*" => Some(multiply),
        _ => None,
    }
}
pub trait Evaluator {
    fn evaluate1(&self) -> u64;
    fn evaluate2(&self) -> u64;
    fn display(&self) -> String;
}

struct Value {
    value: u64,
}

impl Evaluator for Value {
    fn evaluate1(&self) -> u64 {
        self.value
    }

    fn evaluate2(&self) -> u64 {
        self.value
    }

    fn display(&self) -> String {
        self.value.to_string()
    }
}

pub struct Expression {
    operators: Vec<Operator>,
    operands: Vec<Box<dyn Evaluator>>,
}

impl Evaluator for Expression {
    fn evaluate1(&self) -> u64 {
        assert!(self.is_valid());

        if self.operators.is_empty() {
            self.operands[0].evaluate1()
        } else {
            self.operators
                .iter()
                .enumerate()
                .fold(self.operands[0].evaluate1(), |acc, (i, f)| {
                    f(acc, self.operands[i + 1].evaluate1())
                })
        }
    }

    fn evaluate2(&self) -> u64 {
        assert!(self.is_valid());

        if self.operators.is_empty() {
            self.operands[0].evaluate2()
        } else {
            self.operators
                .iter()
                .enumerate()
                .fold(self.operands[0].evaluate2(), |acc, (i, f)| {
                    f(acc, self.operands[i + 1].evaluate2())
                })
        }
    }

    fn display(&self) -> String {
        assert!(self.is_valid());
        format!(
            "({})",
            if self.operators.is_empty() {
                self.operands[0].display()
            } else {
                self.operators.iter().enumerate().fold(
                    self.operands[0].display(),
                    |acc, (i, &f)| {
                        format!(
                            "{}{}{}",
                            acc,
                            match f {
                                ADD => " + ",
                                MULTIPLY => " * ",
                                _ => panic!("unsupported"),
                            },
                            self.operands[i + 1].display()
                        )
                    },
                )
            }
        )
    }
}

impl Expression {
    fn is_valid(&self) -> bool {
        self.operators.len() + 1 == self.operands.len()
    }

    pub fn parse_without_bracket(input: &str) -> Expression {
        let mut operators = vec![];
        let mut operands = vec![];
        Self::parse_part_without_bracket(input, &mut operators, &mut operands);

        Expression {
            operators,
            operands,
        }
    }

    fn parse_part_without_bracket(
        input: &str,
        operators: &mut Vec<Operator>,
        operands: &mut Vec<Box<dyn Evaluator>>,
    ) {
        assert!(!input.contains('(') && !input.contains(')'));
        let split = input.trim().split(' ');
        let split2 = split.clone();

        operators.extend(
            split
                .filter(|&s| s == "+" || s == "*")
                .map(|s| parse_operator(s).unwrap()),
        );
        operands.extend(
            split2
                .filter(|&s| s != "+" && s != "*")
                .map(|s| -> Box<dyn Evaluator> {
                    Box::new(Value {
                        value: s.parse().unwrap(),
                    })
                }),
        );
    }

    pub fn parse(input: &str) -> Self {
        let (res, _) = Self::parse_bracket_content([input, ")"].join("").as_str());
        res
    }

    // input is the full string from just after the opening bracket
    // the rest after after the corresponding closing bracket will be the second output
    fn parse_bracket_content(input: &str) -> (Self, /*rest:*/ &str) {
        let mut operators = vec![];
        let mut operands: Vec<Box<dyn Evaluator>> = vec![];

        let mut rest: &str = input;

        while !rest.is_empty() {
            let bracket_open = rest.find('(');
            let bracket_close = rest.find(')');

            assert!(bracket_close.is_some());

            let bracket_index = min(
                bracket_open.unwrap_or(usize::MAX),
                bracket_close.unwrap_or(usize::MAX),
            );
            let bracket_is_open = bracket_open.map_or(false, |i| i == bracket_index);

            if bracket_index == 0 {
                rest = &rest[1..];

                if bracket_is_open {
                    let (e, new_rest) = Self::parse_bracket_content(rest);
                    operands.push(Box::new(e));
                    rest = new_rest;
                } else {
                    break; // encountered end of bracket to parse
                }
            } else {
                if let Some(operator) =
                    parse_operator(if rest.len() >= 3 { &rest[..3] } else { rest })
                {
                    // if previous iteration closed a bracket, we'll have an operator to handle
                    operators.push(operator);
                    rest = &rest[3..];
                } else {
                    if bracket_is_open {
                        // We always have an operator before an opening bracket
                        // (otherwise it's the start of the line which is verified by bracket_index == 0 above)
                        let input_before_operator = &rest[..bracket_index - 3];
                        Self::parse_part_without_bracket(
                            input_before_operator,
                            &mut operators,
                            &mut operands,
                        );
                        let operator_before_bracket = &rest[bracket_index - 3..bracket_index];
                        operators.push(parse_operator(operator_before_bracket).unwrap());
                    } else {
                        Self::parse_part_without_bracket(
                            &rest[..bracket_index],
                            &mut operators,
                            &mut operands,
                        );
                    }

                    rest = &rest[bracket_index..];
                }
            }
        }

        (
            Self {
                operators,
                operands,
            },
            rest,
        )
    }
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_without_bracket_part1() {
        let input = "1 + 2 * 3 + 4 * 5 + 6";
        let sol = 71_u64;

        let exp = Expression::parse_without_bracket(input);
        assert_eq!(exp.evaluate1(), sol);
    }

    fn test_expr_part1(input: &str, sol: u64) {
        let exp = Expression::parse(input);
        println!("{}", exp.display());
        assert_eq!(exp.evaluate1(), sol);
    }

    fn test_expr_part2(input: &str, sol: u64) {
        let exp = Expression::parse(input);
        println!("{}", exp.display());
        assert_eq!(exp.evaluate2(), sol);
    }

    macro_rules! expr_tests_part1 {
        ($($name:ident: $value:expr,)*) => {
        $(
            #[test]
            fn $name() {
                let (input, expected) = $value;
                test_expr_part1(input, expected);
            }
        )*
        }
    }

    expr_tests_part1! {
        simple1: ("(1 + 1)", 2),
        simple2: ("(1 + 1) + 1", 3),
        simple3: ("(1 + (1 + (1 + 1)) + 1) + 1", 6),
        simple4: ("(2 + 1) + 1 * 4", 16),
    }

    expr_tests_part1! {
        official1_1: ("1 + 2 * 3 + 4 * 5 + 6", 71),
        official1_2: ("1 + (2 * 3) + (4 * (5 + 6))", 51),
        official1_3: ("2 * 3 + (4 * 5)", 26),
        official1_4: ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 437),
        official1_5: ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 12240),
        official1_6: ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 13632),
    }

    macro_rules! expr_tests_part2 {
        ($($name:ident: $value:expr,)*) => {
        $(
            #[test]
            fn $name() {
                let (input, expected) = $value;
                test_expr_part2(input, expected);
            }
        )*
        }
    }

    expr_tests_part2! {
        official2_1: ("1 + 2 * 3 + 4 * 5 + 6", 231),
        official2_2: ("1 + (2 * 3) + (4 * (5 + 6))", 51),
        official2_3: ("2 * 3 + (4 * 5)", 46),
        official2_4: ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 1445),
        official2_5: ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 669060),
        official2_6: ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 23340),
    }
}

fn main() {
    let input = get_input();
    let exps = input.iter().map(|&s| Expression::parse(s));
    // for (&str, exp) in input.iter().zip(exps.clone()) {
    //     println!("Part 1: {}  =  {}", exp.evaluate1(), str);
    // }
    let sum1: u64 = exps.clone().map(|e| e.evaluate1()).sum();
    println!("Part 1: sum is {} .", sum1);

    let sum2: u64 = exps.map(|e| e.evaluate2()).sum();
    println!("Part 2: sum is {} .", sum2);
}

pub fn get_input() -> Vec<&'static str> {
    vec![
        "(7 * 7 + (2 + 5 * 7 * 8 + 2) + 4 + 2) * 5 * ((9 * 3 * 9 + 8 + 3) + (9 + 4 + 7 + 8) * (2 + 5))",
"((7 * 7 * 9 * 5 + 5) + 9 * (9 + 7 + 9 + 5 * 9 + 6)) * 7 + 8 * 6 + 4 * 4",
"6 * (9 + 8 + 6 * 8 + (3 * 2 + 4)) + 4",
"(7 * 5) + 4 + 7",
"3 * (6 * 8 + 5 + (8 * 9 * 3 + 7 * 4) + 8) * 3 + 2 * 5",
"(4 * 3 * (7 * 2 + 2 + 6 + 5) * 4 + 8) + 9 * (3 + 2 + (5 * 2)) * (2 + (2 * 9 * 3) * 5 * (7 * 5 + 6 * 2 * 7) + 5 + 5)",
"4 + (6 * 7 * (5 * 7) * 4) * 2 + (4 + 8 * 5) + ((5 * 7 * 4 * 7) + 3 * 5 + (6 + 9 + 3 + 2) + 2 * 5) * 7",
"2 + 4 + ((4 * 4 + 3 + 7 * 4) + 4 + (2 * 5 + 9) + 8 + 4 + 7) + 5 * 5 + 9",
"7 * (7 * 3 + 2 * 9 + 7 + 7) * 3 * 4",
"8 + 4 + 3 + 9 + 8",
"2 + 2 + 6 * (5 + 9 * 3 * 7) * 6",
"(3 * 9 * 4 + 2 * 6) * 8",
"8 + 6 * 4 + (7 + 7 + 8 + 9) * ((2 + 3 + 7 + 6 * 3) + 6 * 6)",
"7 + 9 * 3 * 9",
"((9 + 6) + 7 + 6) + (2 + 5 * 3 * 2 * 7)",
"(8 * 7 + 6 * 6 * 7 + 3) + 5",
"9 * (8 + 3) * 9 + (4 + 8 * (3 + 9 + 5)) * 9",
"9 + (5 * 2 * 4 + 3) * 3 + 6",
"(3 + 7 + 2 + 3) * 3",
"3 * (7 + 3 * 8 * 9 * (5 * 7 * 7 * 5 * 9 * 2) + (3 + 2)) * 7 + (8 + (6 + 9 + 6 * 7)) * 7 + 3",
"(8 * 3 * (2 * 2 + 9 * 2) + 3 + 8) + 8",
"3 + 5 + (6 * 6) + 8 * ((7 + 9 + 5 * 7 + 3 + 9) * 6 * 4 + (3 + 8 * 6 + 6 + 7 * 5) + 9) + 2",
"(3 * 7 + 3) + 3 * (5 + 7 * 5 * 2) + 6 + (9 + 9) * (5 + (9 * 6 + 7 + 5 * 2) + 5)",
"(7 + 9 * 2 + 3) * 5 * 8 * 8",
"7 + 6 * 7 + 2 * ((9 + 2 + 3) + 2 + 2 + 3 + 4)",
"((3 * 4 * 8 + 4 + 5 * 9) + 2 * 2) * 3",
"5 * 4 + 3 + (5 * (6 * 2 + 8) + (4 + 5 + 3 + 2 * 3 * 3) * (7 + 3 + 4 + 4) * 9) + 7",
"9 * (2 * (2 * 7 + 2 * 9 + 4) + 6)",
"4 + (2 + (5 + 6 + 7 + 7 + 9 * 9) * 2 * 4) + (8 + 7 + 4 * 7) * 7 * 5",
"9 * (4 * 3 * 6 + 2)",
"9 * 8 + 4 * 9 + (4 + 7 + 7 + 6 * 2 + 3)",
"5 * (9 * 2 + 8) + 8",
"5 + (8 * 2 + 5 * 9) + 9 * 8 * 2 * 5",
"5 + 2 * 4 + 4",
"(6 * 8 * 9 + 2) + 7 + 5 + 4 * 4 * 8",
"(8 * 4 * 2 + 5 * 5 * (9 + 8 + 7 + 9)) + (9 * 9 * 3 + (4 + 7) + 6) + (8 + 2 + 8 * 5 * (3 * 8)) * 6 + 2 + 9",
"4 + (8 + 3 + 6 + 3) + 8 + 9 * 2",
"(3 * 4 * 2 * 2) + 8 + 7 + 5 + 5",
"5 + (8 * 3 * 6 * (6 + 3 * 8 * 4) * 6) + ((4 * 3 * 7) + 6 + 2 + (2 * 5 * 3 * 8) + (2 + 9 * 5 + 2) + 6) * ((3 + 7) + 5 * 4) + 6 * 2",
"(8 * 4 + 8 + 7 + (6 * 7 * 5 + 4)) + 7 * 8 + 4 + 4 * 6",
"2 * 5 + (6 + 6 + 5 * (2 * 9 + 8 * 4)) + (5 * 2) * 2",
"(8 * 4) * 5 + (7 * 8 * 5 + 6 * 6)",
"7 + 4 + 7 * 8 * (7 * (8 + 5 * 5 + 3 * 7) * 4 * (2 * 2 + 4 * 3)) * 2",
"4 + 2 * 6 * (7 * 7 + 4 * 9 + 2) * 5",
"4 * 5 + 9 * (7 + 6 + 6)",
"(8 * 7 * 7 + 3) + (9 + 3 + 9) * 6 + 4",
"2 * (3 + 4 + (3 + 5 * 3) * 4) * 3 + 4 * (3 * 3 + 3 + 9 + (6 * 9 + 6 + 2 + 8 * 5) + 4)",
"(8 * 7) * (3 + 2 * 4 * 6 * 8 * 6) * 4 + (8 * 3 + 3 + 6) * 2",
"7 * 7 * 4 + 4 * (2 * (4 * 4) + 7 * 5 + (8 + 5 * 3 * 7 * 8 * 9))",
"8 * (9 * 6 + 3)",
"4 + (9 + 4 + 4 * 8 + 2) * 2 + 2 * 8 + 2",
"(6 + 5 + 3 + (6 * 5 + 4 + 3 * 8 * 2) + 7) + 5",
"((2 * 4 * 5 * 2 * 3) + 7 + 6 * 4 + 6) + 4 * (3 + (6 + 3 + 6 * 5 * 6 * 2) * 5 + (3 * 4 * 2 * 9 + 5 * 9) + (3 * 6 * 6 + 4) * 2) + 4 * 7",
"9 * ((6 * 9 * 4) + 9 * (6 * 9 * 4 * 5 * 8 * 3) + 7 + 4) * (3 * 8 + 7 * 6 * (7 + 2 + 9 + 3 * 8 + 6)) * 9",
"8 * 8 + 7 + ((6 + 5 + 5 + 9) + 4 + 3 * (7 + 5 + 8) * 4) * 2 * (4 + (5 + 6) + 7)",
"(4 * 8 * 9) + ((3 * 9 + 8) * 5 + 6 + 9) * 4 * 4",
"5 * 2 + 6 + ((9 * 9 + 2) + (5 * 3 + 2 * 3)) + 6",
"(6 + 6) * 2 + 4 * 8",
"((7 * 5 * 6 + 2) + (9 + 2) + 7) * 4 + 9",
"5 + (5 * 4 + (7 * 9 * 6 + 9) * 2 * 2)",
"8 * (4 * 3 + (4 + 3 * 3 + 6))",
"((3 * 4 + 6 * 4 + 8 * 5) + 9 * 6 + 5 + 9) + 4 + 6 + 4",
"9 * 7 + (8 * 4 * (4 * 8 + 9 + 3) + 9)",
"3 * (3 * 4 * 9 * 2 * 6 * 2)",
"8 + 9 * 6 * 2 * (3 * 3 * 3 + 5 + 8)",
"8 + 9 + 6 + ((3 * 4 + 7) * 9)",
"(5 * (2 * 4 * 8 + 6) * 9 + 8 + (4 * 4 * 5)) * ((9 + 6) + 2) * 8 + 6 + 4 + 9",
"(8 + 7) + 7 + (3 * 6) + 6 + 2 + 9",
"(6 + 4) * 9",
"2 + (2 * 4 + 7 * 3 * 2) * 7",
"9 + 5 + ((6 + 7 + 5 * 7 + 3 + 4) + (7 * 9 * 7 + 6 * 5) * 2 + 6)",
"7 + (4 + (3 * 7 + 9 + 6 + 5 * 2) * (5 + 3 + 5 + 5 * 2 + 7) * 6 + (8 + 7 + 9 * 6 * 3) + 2) + 6 + 6 * (5 * 8 * 5)",
"2 * (9 * 9 * 8 * 8 + (3 * 3 + 3 + 7 + 2)) + ((4 * 7 * 7 + 9) * 4 + 9 + 9 + (6 + 2 + 6))",
"(6 + 6 * 5 * 6 * (7 * 5 * 8 + 3 * 7 + 8) * 9) * 7 + 6 + 2 + 5 * 2",
"2 + 5 + 2 * 5 * 3",
"6 + 6 + (2 + 3 + 7 * 2) * 5 * (3 + (6 * 3))",
"5 * 8 * 4 + (7 * 6)",
"((6 * 3 * 8) + 4 + 9) + 9 + 8 + (8 + 7 * 9 + 5) * 6 + 7",
"6 + 6 + (2 * 8 + 6 + 9 * (6 * 2 * 5 * 2 + 2 + 8) + 7) + (4 * 4 + 7 * 5 * 6 + 8) + 9 + 7",
"9 + 3 + ((9 + 3 * 6 + 3) + 7) + 9 + 4",
"9 + (8 * 9 * 6) + 6 * 6 + (6 + 7 + (3 * 4 * 3 * 7 * 3 + 9) + 3 * (3 * 2 * 6 + 2 * 4 * 3)) + 2",
"4 + 9",
"(9 + 8 * 6 + (8 * 7) + 7) * 8 * 6",
"7 + 5 + 7 + (3 + 6 * 4 * 8 * 8)",
"8 * (8 + 8) * 5 * 9 * 6 * 3",
"7 + 3 + (9 * 8 * 5) + 9",
"9 + 3 + (2 * 4 * 6 * 8 + 9)",
"(8 + 9 + 5 * (5 * 4)) * 6 + 3 * 4 + 7 * 3",
"(6 + 7) * (6 + 3)",
"3 * 5 + (7 * 3 * 6 + 5 + (5 + 7))",
"(9 * 6 + 7 + 5 + 9) + 4 * ((9 * 8 + 8) + 5 * 2 * (4 + 8 * 5) * 4) + 7 + (8 + 9) * 9",
"(9 + 3) + 6 + 3 + 4 * 9 * (4 + 9 * 7)",
"3 * 4 + 7 * 8 + (8 + 8) * (8 * 4 * 8 + 4 * 9)",
"4 + ((4 * 5) + 9) * 8 * 4",
"(6 * (2 * 2 * 3 + 9)) * 7",
"7 * (6 + 2) + 3 * 7 * 2",
"4 + 2 * 9 + (3 * (4 * 2 + 6 + 4) + (7 * 7) * 5) + 6",
"3 + 9 * (4 + 3 * (7 * 9 + 8)) + ((5 * 5) + (6 + 3 + 9) + (2 + 8 * 4) + (8 + 8 + 8 * 7 + 4) * 2 + 6)",
"3 * 9 + 5 * 8 + 7",
"2 + 8 * 9 * ((5 + 9 * 6 + 8 + 6) * 9 + 2 * (5 + 3 * 2 * 5))",
"(3 * 9 + 8 + 2 + (6 + 8 * 9 * 7 * 7 * 5) + 6) * 3 * (8 * 4) + 5 * 4 + 9",
"(3 * 9 * (9 * 8 * 3 * 5 * 2 + 9) * 3) + (6 * (6 + 4 * 8 * 4 + 5) * 3 * (7 + 7))",
"6 + 5 * ((5 * 8 + 8 * 4 + 3 + 9) + 8) + (6 + 2 * (4 * 3 * 3 + 2) + (7 * 5) + 8) + 2",
"((2 + 7 + 8) * 6 * 4) * 8 + 5 * 8 + (3 + 4 + 8) * 8",
"6 + (6 * 7 + 5) * 2 * 2 * 5",
"6 * 2 + ((9 * 5 + 5) + 2)",
"2 * (4 + (7 * 9 + 7 + 4 * 5) * 4 + (2 + 3 + 6 * 5)) + 7 + 7 * 7 + 5",
"(2 + 6 + 7 + (3 + 9)) + ((6 + 2 + 7) + 4)",
"((6 * 3 + 2 + 6) * 7 + 7 * 5 + 3 * 4) + ((5 * 6 * 7 + 9 * 2) * 6 + (2 * 7)) * ((7 + 9) + (2 * 2 + 7 + 2 * 5 * 6) * 8 + (3 * 4 * 6 * 4))",
"5 + 7 * (5 + 4 + 4 * (2 + 3 * 2) + 8)",
"8 + (6 * 4 * 9 * 4) * (3 * 3 + (7 + 6 + 6 * 5 * 4)) * 8 + 4",
"9 * 5 + 9 + ((3 + 9 * 2) + 4 * (6 * 8 + 8 + 8 * 4 + 6) + 4)",
"3 + (2 * 4 + (6 * 4 * 2 + 3 * 2) + (3 * 6 * 6 * 6) + 5) + 5 + 3 + 8 * 5",
"5 * (7 + 6 * (9 * 9) + 4) + (2 + (4 + 6 * 7 * 6 + 2 * 9) * 2 * 9 + 3 * 7) + 5 * 6 * 2",
"4 * 3",
"5 + 9 * ((7 + 2 + 6) * 4 * 2 + 8) + 3 + (7 * 7 + (3 + 4 * 2 + 2 + 4) + 6 * 8)",
"(6 * 7 * 2) * 2 + (9 + 9 + 9 + 3 + 4)",
"(5 + (5 * 5) * 6 + (4 * 5 + 4 * 2 * 8) + 7 + 4) * 4 * 4 * 6 * 5 * 5",
"4 + 9 + 8 + (7 * 8 * 7) + 3",
"3 + 7 + ((8 + 8 + 3 * 4 * 3) * 9 + 2)",
"(4 * 7 * 3 * 5 * (2 * 6)) + 7 * 6 + 8 + 4",
"4 * 7 * 6 * 9 * 9 * 5",
"8 + (5 * 9 * 3 + 8 * 2) * 9 + (6 * (2 * 4) + 9 + 3 + 3)",
"3 + ((3 + 4 + 8 + 4 * 9) + 9 + 8 * 9 + 8) + 2",
"6 + ((2 + 3) * 8 + 9 + (7 + 6 + 5 * 8)) + 8 * 8 + 8 * 4",
"(9 * 5 * 6 + (6 * 3 + 6 + 5 + 2 * 2) * 3 * 9) * 3 * (2 * 6) + 2 * 6 + 9",
"9 * 8 + 6 + 4 + (2 * 6)",
"(8 + 6 + 7 + 3 + 7 + (8 + 6 + 3 + 7 + 3 * 7)) * 7 * (7 + 6 * 4 * (7 + 9)) * 6 + 4",
"((2 * 4 * 2 * 3) + (2 * 9 * 8 + 4) * 3 + (9 + 8)) + 7",
"6 + (6 + 5 * (8 + 7) * (5 + 8 * 3 + 2)) + 4 + 3 * 6",
"6 + 4 + 3 + (7 * (2 + 3 * 8 + 4) + 8 * (2 * 3 * 9) + 3) + 8",
"3 + (8 * (5 * 9) * 4 + (5 + 5 * 7 * 9 + 9)) * 4 * 6",
"3 + ((3 * 4) + 5) * 9 * 5 + 4 * (7 * 9 * 7)",
"2 + 8",
"9 + 5 * 8 + (6 + 8 * 8 * 8 * 9 * 3)",
"((8 * 3) + 2) + (7 + 6)",
"9 * (6 + 9) + 8",
"8 + 3 + 4 + (4 + 9 * 3 * 7 * 9 * 4) * 9",
"(5 + 9 * 6 + 2) * (6 + 5)",
"2 * 7 + (9 * 5 * 2 * 5 * 5) * 3",
"6 + 4 + ((2 + 7 + 5) * (6 * 9 + 2 * 9 + 8 + 2)) + 7",
"9 + 7 + 8 * 7 + ((7 * 9 + 8 + 4 * 4) * 9) * 8",
"3 + (4 + 9 * 3 + 6) * 4",
"((3 + 2 * 6 * 4 * 2) * 8 + (8 * 7) + 2 * 6) + 8",
"((6 * 8 + 2 * 8 * 5 + 5) * 2 + 5) * (4 + 7 + 4 + 2 * 5 + 2) * 4 * (4 * 6 * 8) * 4",
"3 * (5 * 5 * 5 * 5) + 5 + 8 * (2 + 4)",
"8 + 9 * ((8 * 4 + 7 + 5) * 4) * 5",
"5 * (7 * 3 * 8 * 6 * 8 + 6) * 9 + 2 + (3 + (4 + 7 * 9 * 4 + 5) + 3 * 8 * (9 + 8 + 8 + 4 + 2)) + 7",
"5 + 9 * (4 * 7 * 7 + 7 * 5) + 8 + (4 * 3 + 3 + 2)",
"5 + 9 + (8 * 6) + 7 + 7 * (6 * 5 * 3 * 3 + 9 * 5)",
"9 + (6 * 7 * (3 * 4 + 6 + 8 * 7)) + (4 * (2 + 8 * 7 + 5 * 6 * 3)) * 3 * ((7 + 9 + 3 * 4 + 2) + 2 + (7 * 3 + 3 * 7 * 8 + 2) * 4 + 5) * 4",
"2 + 7 * (2 + 2) * 2",
"(2 + 3 + 8 + 2) + 3 + 8 * (8 + 5 + 9 + 6 + 8 * 2)",
"2 * (8 * 5 + 7 + 7 * 3) + 9 + 9",
"3 * (6 * 3 + 5 + 2 * (2 + 2) + 6) * (8 + (7 + 9 * 4) + 7 + 6) + 6 * 2 * 3",
"7 + 4 * (4 + 2 * (8 + 6 * 7 + 3) * 5 * 8) + (8 * 8)",
"(3 * 5) + ((9 + 8 + 2 + 4 * 8 + 2) * 6 * 3 + 5 + 8 + 4) + 5",
"2 + 6 * (7 + 3 * 9 * 7 * 7 + 8) + 9 + 3 + 8",
"((2 + 9 + 6 * 5 * 3) + 9 + (2 + 3 + 3)) + (4 * 6 + 9)",
"(7 + 6) * (7 * 9 + (8 * 3 + 4 + 7) * 2 * 5) + 7 * (4 * 7 * 9 + 2 * 6 * 4) + 9",
"(2 * 6) * 3 * 7 * ((3 + 9) * 9 + (4 * 4 * 6 * 5)) * 4",
"7 * 6 * 5 * 8 + (9 * 4 + 4 + 5)",
"(6 + 7 + 4 * 8 * (6 * 4 * 4 * 8 + 7 * 5)) + 3 + 5 * 5",
"9 + 9 * 3",
"5 + 4 * 5 * 4 * (6 * (7 + 5) + 7 + (8 * 7 + 3 * 5 * 2 + 2) * 7) * 9",
"4 + ((7 + 8 * 8 + 2) + (2 + 4 * 8) + (7 + 9 * 4 * 2) * 2 + 7)",
"4 * 5 + 9 * (7 + 2) + 8",
"((5 * 5 * 3 + 2) + 5 + 6 + (7 * 5 + 7 * 4 * 6 * 6) + 4 + 5) * 5 + (4 + 8 * (8 + 3 * 6 + 7) + 4 * (4 + 6 + 4 * 8 + 7 * 7)) * (9 + 2)",
"(9 * 5 * 7 * (8 * 3 * 6 * 4 + 6) + 8) + (7 * 8) * 2 * (7 + 7 + 5 + 3) * 6",
"4 * (3 + 6 * 4 + 6 + 3)",
"(3 * 7 + 5) + 2 * 2 * 6 * 8",
"7 * (2 + 4 + 3 * 9 * 8) + 3 * (5 * 9) * 5 + 7",
"5 * 7 * 8",
"2 * 3 + (6 + 8 * 9) + 5 + 6",
"(9 + 8 * 8) * ((9 + 9 + 8 + 9 + 7) + 3 + (3 * 6 * 3 + 9 + 8) + 7)",
"((2 + 8 + 9) * 3 + 8 * 2) + 8 + 4 * 2",
"(9 + 6 * 6) * 7 * 8 + ((7 + 9 * 4 * 4) + 8 + 5 * 5)",
"5 + 3 + 3 * 2 + (8 + 8 * 3 + (8 * 6)) * 4",
"8 + 8 * ((8 + 4) + 2 * 7 * 9) * 5",
"(3 + 3 + (4 * 3 * 4 + 6) + 4 * 3 * 4) + 7 * 4 + 4",
"5 + (5 + (9 * 5 + 5) * 9 * (6 * 9)) + 2 + (9 + 8 * (2 + 3 * 8 + 2 * 7) + 7 + 7 + 2)",
"7 + 3 + (6 * 6 * 6)",
"(3 * 4 * 6 * 4 + 5 * 8) * 2 * 5 * 6 + (5 + 3 + (3 + 2)) + (6 * (4 + 3 + 7 + 8) + 4 + 3)",
"(3 * 2 * (4 + 6 * 4) * (3 + 2 + 6 + 5)) + 9",
"8 * 3 * 6 + 3 + 5 + (9 * 3 * 3 + 2 * (5 * 2 + 8 * 9))",
"((7 + 9 + 5 * 2) + (2 * 6 * 8 * 3 + 6) + 2 * (9 + 3 * 5 * 9 * 5 * 2) + 9) + 4 * 6",
"(6 * 7) * (8 + 6 + (7 * 3 + 2)) * 7 + 6",
"3 + 7 + (5 * 5) + 5 * 6",
"3 * 4 * 3 + 8 * 3 + 9",
"(8 * (3 + 9 * 6) * 3 * 6 * (5 * 2)) + 2 * 9 * 4",
"2 * 6 + (9 * 7 + 9) * (8 + 5 * 8 + 7 * (5 + 3 * 5 * 4 * 4))",
"(8 * 7 * 8 * 3 + 9 * 2) + 6 * (3 * 7 * 2)",
"5 + 2 + ((2 + 3 * 3 + 7 + 7 + 9) * (6 * 4 + 4 + 3) + (6 * 6 + 8 * 2 * 9 + 9) * 4)",
"(9 + 4 + 9) + 7",
"2 * (9 * (3 * 7) + 9 + 7 + 2)",
"(8 + 2 + 9 + (7 * 2 + 9 * 8 * 9 * 6)) + 7 + 8 + 8 * 6 + (7 + (4 * 9 + 5 + 4 + 7) + (3 * 9 + 7 * 7 * 7 * 7) + 6)",
"((4 + 2 * 2 * 7 * 6 + 8) + 4 * 7) * (4 * 5 * 3) * (7 * 9 + 2 + 7 * 6 + (7 * 9 * 5)) * 2 + 5",
"6 * (5 * 6 + 4) + 7 * 6 + 6 * 5",
"7 + 6 + 8 * (5 * (7 * 2 * 9) * 2 + (8 + 9 * 5)) * 9",
"7 + 2",
"6 * (6 * 8) + 4 + (3 * 7 + 7 + 6 * 7 * 3) + 9",
"((6 * 4 * 2) * 7 * 4 * 2) * 7 + 6",
"2 * 4 + (7 * 9 + 2 * (9 + 9) + 2) * 8 * 9",
"6 + 5 + (2 + 5 * 5 + 9 * (9 * 5 + 8 * 7 * 8) + 3) * (3 * (2 + 3 + 7 + 2 + 6 * 6)) * 4 * 5",
"(8 * 4 * 8 * 5 + 7) * (3 + 9 * (9 + 9 + 9 * 8) * 9 * 8 + 2)",
"4 * 3 + 3 + 9 * (3 + 9 + 7) + 5",
"3 + (7 * 3 + (5 + 3 * 9)) + (4 + 4 + 2 * 7) * (6 + 2 * 2 + 7 * 6 + 8)",
"4 * (4 * 8 * 8 + 8) + ((8 * 6) + 3 + 4 + 8 + (8 + 5 + 8 * 3 + 7) * (8 * 2 + 2)) * 2 * 8 + 5",
"2 * 2 + 5 * 7 * ((4 + 5 * 5) + 4 * 6 + (3 + 4 * 3 + 2 + 4))",
"(9 + 4) * 6 * 6 * (3 * (4 + 8 * 7 + 4) * 2 + 5 * 8 * 8) * (2 * 6 + (7 + 7 + 9 * 9 * 5) * 2)",
"9 + 9 * 5 + 3 + (8 + 9 + 4 + 5) + 9",
"(4 * 4 + (8 * 4 * 7 * 7 + 7)) + 7",
"3 * 4 * 8 * ((3 + 2 * 2 * 7 * 2) * 7 + (7 + 2 + 6 * 9 + 4 + 2) + 9 + 5 * 4)",
"(8 * (4 + 4 + 4 * 3) * (4 + 9 * 9 + 5) + 8 * 8 * 8) * (5 * 4) + 7",
"(4 + 6 + 2) * 2 + 2",
"9 + ((5 * 3 * 9) * 8 + 9) + 5",
"3 * 2 * (2 + 5 * (2 * 5 * 3) + 3) + (5 + 9 + 8) * 5 * 7",
"((4 * 4 + 8 * 4 * 5 * 5) + 3 + 3 + 5) + 8 * 3 + 3 + 9",
"2 + ((4 + 9 * 2 * 8 * 4 * 4) * 9 + 2 + (6 * 3 + 9) + 8 + 3) + 9 + 2 * 5 + (9 * (6 * 7 * 7))",
"2 * (9 + 4 * (7 + 3 + 3 + 4 * 6 * 5)) + 8 + 9",
"(6 * 9 * 3 + 8 * 9) + 9 * 5",
"6 * (8 + (8 + 3 + 9 * 4) + 6) * 2 * 9 + 6 * 7",
"(8 + 6) + 8 * (9 * 2 * 2) + (4 * (3 + 3 * 5 * 9) + 3 * 4 * 7) + 3 + 5",
"4 * (3 * (7 + 4 * 7) + 2 * 9 + 4 * (4 + 3 + 9 + 3)) + 2 + 3 * 9",
"2 + ((5 + 9) * (6 * 8 + 6 * 8 + 9) + 3)",
"((4 * 7 + 8 + 5 * 9 + 6) * 2 * (3 + 9 * 8 * 8) + (8 * 6 + 2 * 9) + 4 + (9 + 8)) + 5 + 6 * ((4 + 2 + 8 * 5 * 2 + 5) + 4 * 8) * 5 + 8",
"2 + (8 * 9 * 7) + 5 + 6 + 8 * (9 + 4 + 9)",
"(8 + (9 + 5 * 5 * 5 + 9 + 7) + (7 + 4 * 3 * 9 + 6)) + 4 * 5",
"6 * (2 * 2) * (2 * (6 + 4) * 2 * 6 + (4 + 2 * 8 + 4 + 2 * 7) + 4) + (8 * 2 + 8 * 9) + 6",
"7 * 5 * ((2 + 3 * 8 * 8 + 9) * 4 + 3 + 5 * 6) + 3 + 5",
"8 * ((5 + 4 * 6) + 6 * (7 + 5 + 7 + 4 * 9) + 2 * 9 + 2) * (7 + 2 * 6 + (4 * 3) + 8 + 9) + 8 + 5",
"5 * 2",
"4 * 5 + 8 * 3 + (3 + 9 * 3 + (3 * 7 + 4 * 3 + 3 + 5) * 9 * 6) + 3",
"(8 + 7 + 3) * 4 + 7 * ((8 * 9 + 5) * 3 * 6 * 6 + 5) + 4 * 6",
"2 * 7 * 3 * (3 + 3 * 5 + (2 + 6) * 3) + ((5 * 5) * 9 * 9 + 8) + 4",
"6 + 7 * (4 * (6 + 2 + 7 + 7 + 2) * 9 * (3 + 3 + 9 + 4 * 7 * 8)) * 4 * (3 + (8 * 5 + 2 * 7) + 4 + 7 * (7 + 3 * 3) + 5) + 6",
"((8 * 5 * 6 + 4 * 9) + 6 + 2 + 5) * 7 + (4 * 8 * 6 * 7 + (7 * 3 * 3 * 8 + 6) * 7) * 5 + 9 + (3 * 5 * 9 + 2 + (5 + 9 * 6) + (4 + 3 * 8 + 6 * 3 + 3))",
"9 + 9 * 8 + (2 * 8 + 2 * 2) + 2 * (9 * 9 * 8 + 7)",
"4 + 3 + 7 * ((8 + 3) * 3 * 8 + 8)",
"9 * 9 + 8 + (5 * 3) * ((3 * 8 * 5) * 4)",
"5 * 7 * 5 * ((3 + 5 * 4 * 7 + 6 * 6) * 6 + 5) * 6 * 8",
"6 + 2 * 9 + 6 * 2 * ((5 * 5 * 8 * 7 + 2 * 5) * 3 * 6 + 2 * (4 + 7) + (4 * 6 * 7 + 7))",
"(7 * 6 + (8 + 6 * 9)) + 2",
"6 + (3 + 2 * 2 + (9 * 8 * 7 * 7 + 2)) * 9",
"3 + (7 + (9 + 4 * 4) * 8 * 9)",
"((7 + 4 + 9) * (2 * 7 + 7 + 7 + 8) + (2 * 2 * 2 * 9)) + 9 * 6 * 2",
"8 + 3 * ((4 * 8 * 5 * 5) + (8 * 9 * 8 + 7 * 9)) + (4 * 7) + 3 * 4",
"3 * (7 * (6 + 3 + 9) * 3 + (4 * 3 + 8) * 9) + 3 + (4 + 2)",
"((6 * 6 + 3) * 7 + 4 + 2 + 5 + 8) * 8 + (2 + 4) + 7 + 3",
"(5 * 5 + 4 * 9 + 2) * 3 + 9 + 8 * 7 + 8",
"(2 * 9 * (2 + 3)) + (3 * 2 + 2 + 6) + 5 * 2 * (4 + 9 * 7)",
"9 * 7 * (4 * 5 + (5 + 3 * 7 + 5 + 8 * 5))",
"(3 + 6 * 9 * (3 + 2 * 4 + 2 + 3)) + (5 + (8 * 4) * 7) * 5",
"2 + 6 * (6 + 8 + (6 + 8 + 8 * 4 + 3 * 5) * 3 * 5)",
"5 + 8 * (8 + 4 * (2 * 4) * 9 + 8)",
"7 * (3 * (7 + 8 * 4 * 5 * 4 + 3) + 4 * 6 * 8 * 6) + 4",
"4 * 6 + 4 * 8 + (2 + (7 + 4) + 4 * 5 * (5 + 7) + (3 + 2))",
"8 * 2 * (2 + 7)",
"8 * 2 * ((9 * 9 * 4) * 4 + 5 * 9 + (9 * 5 * 9 * 5)) + 3 + 6",
"(6 + 2 * 5 + (4 + 2 * 7 * 4) + 6 + 2) + ((5 + 5 + 8 + 3 * 2 * 8) + 7 * 5 * 3 + 4) * 3 * 8 * (4 * 2 + 5 + 4) * 2",
"5 * 6 + 3 + 4",
"4 + (3 * (3 * 3 * 8 + 8 + 7))",
"6 * 7 + 2 + 2 + 2 * (7 + 6 + 2 + 8 * 9 + 2)",
"(5 + 7 + 5 * (7 + 4) * (2 * 8 + 9 + 8 + 4 + 2) * 4) + 5 * ((3 * 5) + 3) * 3",
"8 + 2 + 5 + 8 + ((5 + 8) + 7) * 2",
"5 * 9 + (6 * (3 + 9 + 3 + 7 * 5 * 2) * 4 + 2 + 3) * 8",
"2 * 2 + (9 + 6 * 5 * 6 * 3) + (6 * 2 * 9)",
"8 * 2 + 3 * 7",
"4 + 6 * 5 + 8 * 7 + 6",
"(2 + 9 * 4 * 9) + 4 * 5 + (3 + 7 * 3 * 6) * ((7 * 9 * 6) + 4 + 8 + 7 + 3) * 6",
"4 * 8 + (5 + (8 + 7 + 2 + 6 * 4) + 9) + 2 + 5",
"((3 + 6) * (8 * 3 * 4 + 4 + 2 * 6) + 5 + 8) + (5 * 7 + (7 + 8 + 8))",
"3 + 8 * 3 + 7 + 4 * 6",
"8 + (8 * 6) * 7 + 7",
"((3 * 3 + 4 * 5) * 2 + 3) * 7 + (9 * 8 * 2 * 4 * 5) * 7 * 5 * 3",
"3 + 9 + (6 * 9 * 2 * 7) * 3 * (9 + 6 + 2 + 8 + 7 * 7) * 5",
"5 * 9 * (8 + 7 + (7 * 2 * 2) + (4 + 2 * 5 + 7)) + 6 + 9 + 9",
"(8 * (7 + 2 + 9 + 8) * 6) * (4 * 6 + 4 * 4 + (2 * 6 + 9 + 7 * 5)) + 5 * (3 * 7 + 2 * (4 + 5 * 5 + 8 * 2 * 9)) * 6 + 9",
"8 + 7 + ((6 * 3) + 6 + 5 * 4 + 7) + 7 + (3 + 7 + 2) + (2 * (5 * 9 * 2 * 6 + 9 + 2) * 2)",
"(4 + 7 + 5 + 9 + 7) + 2 * 7 + 3 + 6 * (8 + 4 + 6 * (7 * 6 * 5 * 6))",
"(8 * 9 + 3) * 9 * 6 * (5 * 6)",
"9 + 8 * 9 * 2 + 8 + 7",
"(5 * (4 + 5) * (8 + 8 * 8) * (6 + 6 * 4 * 7)) * 9 * (7 + 5) + 2 * 6",
"9 + (6 + 3) * (5 * 8 * 3 + (4 * 2 * 7 * 6) + 2 + 9)",
"8 * (3 * 8 + 6 * 4 * 9 * 2) + 8",
"5 + 9 * (5 * 9 + 5 + 8) * 7 + (6 * 7 + 2 * 5) * 4",
"2 + ((4 * 6 + 5 + 6 * 9) * 3 * 8 + (5 * 6 + 5 + 8) + 8 + 7)",
"(7 + 3 + (8 + 2 * 2 * 6) * 3 + 7 + 5) * 8 * 7 * (2 * 8 + (8 * 8) + 9)",
"9 + (8 + 6 + (2 * 8 * 9 * 8 + 2) * 7 * 2 * (7 + 7))",
"2 * 2 + 8 * 9 * (9 * 9 * 3 * 2 * 3 + (9 + 9 + 9 * 6 * 3)) * (9 + 8 + 9)",
"(2 * 4 * 8 * 7) * 7 + 8 * 4 * (8 + 6 * (7 + 2 * 5 * 4 + 9) + 4)",
"2 * (3 * 4) * 5 * 7 + 7 + (5 + 3 + 8 * 3 * 2 + 3)",
"9 + 6 + (3 * (5 * 9 + 2) * 6 * (3 * 5 + 9)) * 6",
"5 * 2 + ((5 + 7 * 5 + 2) + 6 + 7 * (3 * 3 + 6 * 6) + 7 * 7)",
"7 * 5 + 3 * 5",
"2 * 7 * 8 + 7 * (2 * 4 * (6 * 6 + 9 * 2 + 3))",
"(4 + (4 + 9 * 6 + 9 * 2 + 2) + (9 * 6 + 6 + 4 + 6)) * (3 + 9) * 8 + 2 + 8",
"2 + 5 + 3 * 4 * 4 * (5 * 4 * 5)",
"((2 * 9 * 6) * 5 * 9 * 2 * 9) + 9 + 5",
"3 + 3 + 4 + 8 + 3",
"2 + (8 * 2 + 7 + (4 + 4 + 5 + 6 + 2 * 9) + 3 * 7) + 4",
"(2 * (3 * 4 * 4 + 4) + 6 * 3) + 5 + 3 * (3 + 6 + (2 + 4 * 9) * 6 + 2) + 7 * (8 * 6 + 5 * 3)",
"6 * 4 + (4 * (3 + 9 + 2) + (3 * 2 * 3 + 2 * 9 * 4) * 2 * 2 + 9) * 8 + 4 * 9",
"((2 + 9 * 6) + 9 * 3 + (6 + 7) * 6) + (6 * 7 + 5) * 2 + 2 + 8 + 9",
"9 * 8 + 2 * 4 * ((2 + 7 + 3) + (2 + 7 * 2) * 3) * 8",
"2 + 2 * 2 * 3 * (5 * 3 * 8 * 3 * (4 + 8 * 8) + 5)",
"(6 + 5 * 5) + 8 * 5 + 8",
"4 + 2 + 4 * 4 * 5 + ((5 * 7 + 7) * 6 + 2 * (3 * 3 * 3 + 7) + 6 + 7)",
"2 + 4 * 3",
"9 + 9 + (4 * (9 * 3 * 8 + 8 + 8 * 5) * 4 * 3 + 9 * (7 + 3 * 9 + 5 * 7 * 3)) * 6 + 2",
"(4 + 2 + 6 + 9 + 3 * 8) * 4 + (9 + 7 * 6 * 8 + 5 * 2) * 2 + 7 * (4 * 4)",
"(2 + 2) * (3 * 2 + 5 + 2 + 6) * 9",
"9 + 4 + 6 * 6 + 6 * (4 * (5 * 7 + 2 + 7 + 9) * 7 + 4 * (4 * 7 + 9 + 5))",
"9 * 8 + 4 * 2 + (2 * 5 * 8 * (3 * 5 + 9 + 3 * 3)) * 3",
"(3 + 9) + 4 + 6 * 3 * (9 * 7 * 3 + 4 + (9 * 4) + 3) * (5 + 6 + 6)",
"7 * 8 + 6 + (4 * 8 * 7 * 7 * (8 + 3 * 5 + 9 * 7 + 5)) * 4",
"7 * ((7 + 7 * 9 + 8 * 8 + 2) + 6 + (2 * 7 + 9)) + 6 * 6 * 6",
"(7 + 3 * 9 * (8 + 4 * 8 * 9 * 7 * 9)) + (9 * (8 + 7 * 4 * 2 * 7 * 2) * 9 * 5) + (8 * 5 + 8 + (8 + 6)) + ((5 * 5 + 2) * 7)",
"8 * 3 + 3 + 7 * (3 * 5 * (3 * 3)) * (4 * 3)",
"9 + 8 * 2 + 6 + ((7 * 2 * 3) * 6 + 7 * (6 * 7) + 6) + 3",
"(2 * 2 * (9 * 4 * 9 + 7 * 4 * 6) + 8 * 9 + 6) * 4 + 4 + 8 * (6 * (9 + 7 * 5 + 5 * 3) + 8 * (8 * 6)) * (3 + 5 * 7 + 2 + 3)",
"3 + ((4 + 9 + 5 + 8 + 9 + 3) + 6)",
"5 + 3 * ((2 * 3) * 3 * 7 * 6)",
"6 * ((4 + 9 * 4) * (6 * 8 * 3 * 7 + 4) * 2 + 9 + 5 + 5) * 7 + (3 + 9 * 7 + 9) + (3 * (5 * 9 + 8) * 7 + 7 + 6)",
"(9 + 9 + (7 * 2 * 2 + 8 + 9) * (3 * 4) * 6) + 4",
"4 * 6 + 4 + 2 * 3 + (8 * 6 * 5 + 3)",
"3 * ((6 * 9 + 4 * 7) + 8 + 8 + 7 * (7 + 5 * 6 + 3 * 6 * 2)) * (9 + (5 * 8) * 6 * (8 * 2 * 2 + 2) * (2 + 5 * 4 + 4))",
"8 * 6 * 6 + 8 * (8 + (6 * 4 + 7 + 3 + 5 + 2) + 9 + 4)",
"(8 * (5 + 2 * 9 * 3 + 6) + 2 * 3 + 3 * 4) + 8 * (9 * 3 + (3 + 7) * 6 + 6 * 8) * 4",
"9 + 5 + (8 + (8 + 2 + 4 + 6 * 8 * 7) * (9 + 4 * 6 * 4 + 6) * 7 + 3 + 7) + 4 + (3 + 5)",
"5 + (9 + 9 * (4 + 7 + 2 + 9 * 7 * 6) + 3 * 9) + (9 * 4 + 3 * (4 * 9 + 4 * 3 * 4 + 2)) * (9 + 7 + 7 * 8 * 4) + 9 + ((7 + 2 * 5 + 5 + 8) * 2 * (6 + 9 * 3 + 9))",
"5 + ((3 * 7 * 4 * 5 * 6) + 3 + 8 + 5 + 6) * 8 + 9",
"8 + 5 + 9 * 8 * 8",
"4 + (9 * (4 + 8 + 9 + 5) + 4 * 6 + 4 + 4) + (8 * (3 * 8 + 7 * 3 + 9)) + 4",
"2 + 7 * (3 * 4 + 8) * 8 * (2 + 6 + 5 + 3 + (6 + 7 + 9 * 8 * 6 + 5) + 2) + 6",
"(2 * (3 * 5 + 6 * 3) * 7 + (7 * 2 + 5 + 8 + 6) * 8) * ((4 + 5 * 2) + 8)",
"(4 * 6 + 7 + 8 + (7 + 9 + 7 + 7 * 5 * 9) + 5) * 9 + 9 + 4",
"6 + 3 + 4 + (7 + (8 + 6 * 3 + 6 + 7 + 2) + 5)",
"9 + 3 + (3 + 6 * 4 + 6) * 8",
"6 + 6 * (2 + 5 + 5 + (3 * 5) + (9 * 4 + 9 * 5 + 3 * 7)) + 5 + 8",
"4 * (8 * 8 + 8) * 9 + 4 * 8 + (8 + 5 * (4 + 8 + 4) * 3 * 9)",
"7 * ((7 + 7 * 9 + 5 * 2 * 2) * (2 * 4 + 7 * 3 + 8)) + 5 + (5 * 5) * (7 * 9 + (7 + 6 + 2 * 3 * 4 * 9)) + 5",
"6 * 4 + 3 + 9 * (9 * 2) + 7",
"9 + 7 * ((9 * 2 + 5 * 8 + 6) + 7)",
"(5 + 3 + (5 + 4 * 4 + 9)) * (6 * 5 + (6 + 6 + 7 + 9 + 3 * 8) * 8 + 2 + 3)",
"9 + 2 + 7",
"6 * (7 * (3 * 5 + 9 * 8 * 3) * 4) * 2",
"9 + 7 * (5 + (8 + 5))",
"2 * 9 + 3",
"(5 + (7 + 8) * (7 * 7 * 8 * 7 * 8 + 3) + (7 * 9 + 4 + 2 * 5)) + 6 + (2 * 5 + (3 + 2 * 2 + 9 + 3) + 5) * 8 + 9 + 7",
"(5 * 3) * (5 + 4 * 5 + 6) + 2 * (2 + 5 + 8) * 6",
"7 + 3 + 6 * ((3 + 3) + 8) + 5 + 7",
"9 * 9 + (9 * 4 * (2 * 4 + 4 + 4 * 8 + 9) + 5)",
"4 * 7 + 8 + (6 + (9 * 3) * 3 + 6) * 3 * 9",
"((3 + 9 + 6 + 6) * 9 * 2 * 3 + 3) + 9 * 2 * ((2 + 2 + 3 * 7 * 2 * 4) * 8 * (6 + 8) + 9 + 4) + 8 * 2",
"((4 + 8) * (7 * 3 + 2) * 9 * 9 * 5) + (5 + 4 + 7 + 4) * 6",
"5 * 2 + (9 + 2 + 8 + 3) + ((6 * 7 * 8 * 6 + 5 + 6) + 2 * (5 + 9 * 7 * 8 + 6))",
"4 + 7 + 3 + ((5 + 5 + 3 + 2 + 2 + 8) + (9 * 8 + 3 * 4 + 9 * 9))",
"((9 * 7 * 8 + 2 + 6 * 3) * 8 * 8 + 7) + 6 * (7 * (4 + 4 * 5 + 7 * 9) + 8 + 5) * 9 + 9 + 6",
"9 + 5 * 6 * 2 + (6 + 5 + (2 * 2 * 5 * 8 * 3 * 9))",
"8 + 3 + (4 * 8 + 7) + ((9 + 8 + 8) * 6 * 8) + (6 + 9 * 9 * 7 * (7 + 8 + 6) * 3)",
"2 * (7 * 3 + 8 * 6 + 8) * 8 * 6 * (4 + 5)",
"5 * (6 + 2 * 9) + (7 + 6) + 8 * 5",
"(4 * (6 + 9 + 3 + 6 + 2)) * 8 * 3 * 2",
"4 * 3 * (9 + 5 * 5 + (5 + 6 * 2 + 7) + 7 + 3) * 5 * 6",
"6 + 7 + (5 + 3 * 2 + 3 * 7 * 2)",
"7 + (4 + 3 * 3 * 9 * 9) + 8 + 4 + 2",
"((4 * 3 * 5 * 8) * 9 + 7) * 8 * 7",
"3 * 8 * (5 * 6) + 2 * 5 + 9",
"((8 + 2 * 4) * 7 + 8) * 8 * 6",
"(3 + 4) + 5 * 4 * 9 + 7",
"(7 * 4 * 3 + (5 + 6 + 2 + 4 * 7) * 5) * 5 + 2 + 8 * 6",
]
}
