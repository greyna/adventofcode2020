use std::cmp::min;

fn add(a: u64, b: u64) -> u64 {
    a + b
}

fn multiply(a: u64, b: u64) -> u64 {
    a * b
}

fn parse_operator(input: &str) -> Option<fn(u64, u64) -> u64> {
    match input.trim() {
        "+" => Some(add),
        "*" => Some(multiply),
        _ => None,
    }
}
pub trait Evaluator {
    fn evaluate(&self) -> u64;
}

struct Value {
    value: u64,
}

impl Evaluator for Value {
    fn evaluate(&self) -> u64 {
        self.value
    }
}

pub struct Expression {
    operators: Vec<fn(u64, u64) -> u64>,
    operands: Vec<Box<dyn Evaluator>>,
}

impl Evaluator for Expression {
    fn evaluate(&self) -> u64 {
        assert!(self.is_valid());

        if self.operators.is_empty() {
            self.operands[0].evaluate()
        } else {
            self.operators
                .iter()
                .enumerate()
                .fold(self.operands[0].evaluate(), |acc, (i, f)| {
                    f(acc, self.operands[i + 1].evaluate())
                })
        }
    }
}

impl Expression {
    fn is_valid(&self) -> bool {
        self.operators.len() + 1 == self.operands.len()
    }

    pub fn parse(input: &str) -> Self {
        let mut operators = vec![];
        let mut operands: Vec<Box<dyn Evaluator>> = vec![];

        let mut rest: &str = input;

        // we analyse only until the next bracket at each iteration of this loop
        while !rest.is_empty() {
            let bracket_open = rest.find('(');
            let bracket_close = rest.find(')');

            if bracket_open.is_none() && bracket_close.is_none() {
                // no more brackets, end of loop
                if let Some(operator) = parse_operator(&rest[..3]) {
                    // if previous iteration closed a bracket, we'll have an operator to handle
                    operators.push(operator);
                    rest = &rest[3..];
                }
                operands.push(Box::new(build_simple_expression(rest)));
                break;
            } else {
                let mut bracket_index = min(
                    bracket_open.unwrap_or(usize::MAX),
                    bracket_close.unwrap_or(usize::MAX),
                );
                if bracket_index == 0 {
                    rest = &rest[1..];
                    continue;
                }
                let bracket_is_open = bracket_open.map_or(false, |i| i == bracket_index);

                if let Some(operator) = parse_operator(&rest[..3]) {
                    // if previous iteration closed a bracket, we'll have an operator to handle
                    operators.push(operator);
                    rest = &rest[3..];
                    bracket_index -= 3;
                }
                if bracket_index == 0 {
                    rest = &rest[1..];
                    continue;
                }

                if bracket_is_open {
                    // We always have an operator before an opening bracket
                    // (otherwise it's the start of the line which is verified by bracket_index == 0 above)
                    let input_before_operator = &rest[..bracket_index - 3];
                    operands.push(Box::new(build_simple_expression(input_before_operator)));
                    let operator_before_bracket = &rest[bracket_index - 3..bracket_index];
                    operators.push(parse_operator(operator_before_bracket).unwrap());
                } else {
                    let input_before_bracket = &rest[..bracket_index];
                    operands.push(Box::new(build_simple_expression(input_before_bracket)));
                }

                rest = &rest[bracket_index + 1..];
            }
        }

        let e = Expression {
            operators,
            operands,
        };
        assert!(e.is_valid());
        e
    }
}

fn build_simple_expression(input: &str) -> Expression {
    assert!(!input.contains('(') && !input.contains(')'));
    let split = input.trim().split(' ');
    let split2 = split.clone();
    let e = Expression {
        operators: split
            .filter(|&s| s == "+" || s == "*")
            .map(|s| parse_operator(s).unwrap())
            .collect(),
        operands: split2
            .filter(|&s| s != "+" && s != "*")
            .map(|s| -> Box<dyn Evaluator> {
                Box::new(Value {
                    value: s.parse().unwrap(),
                })
            })
            .collect(),
    };
    assert!(e.is_valid());
    e
}

#[test]
fn test_simple_expression() {
    let input = "1 + 2 * 3 + 4 * 5 + 6";
    let sol = 71_u64;

    let exp = build_simple_expression(input);
    assert_eq!(exp.evaluate(), sol);
}
#[test]
fn test_compound_expression2() {
    let input = "(1 + 1)";
    let sol = 2_u64;

    let exp = Expression::parse(input);
    assert_eq!(exp.evaluate(), sol);
}

#[test]
fn test_compound_expression3() {
    let input = "(1 + 1) + 1";
    let sol = 3_u64;

    let exp = Expression::parse(input);
    assert_eq!(exp.evaluate(), sol);
}
#[test]
fn test_compound_expression6() {
    let input = "(1 + (1 + (1 + 1)) + 1) + 1";
    let sol = 6_u64;

    let exp = Expression::parse(input);
    assert_eq!(exp.evaluate(), sol);
}

fn main() {
    let input = get_input();
    let exps = input.iter().map(|&s| Expression::parse(s));
    for (&str, exp) in input.iter().zip(exps.clone()) {
        println!("{}   =   {}", exp.evaluate(), str);
    }
    let sum: u64 = exps.map(|e| e.evaluate()).sum();
    println!("sum is {}", sum);
}

pub fn get_input() -> Vec<&'static str> {
    vec![
        "(7 * 7 + (2 + 5 * 7 * 8 + 2) + 4 + 2) * 5 * ((9 * 3 * 9 + 8 + 3) + (9 + 4 + 7 + 8) * (2 + 5))",
"((7 * 7 * 9 * 5 + 5) + 9 * (9 + 7 + 9 + 5 * 9 + 6)) * 7 + 8 * 6 + 4 * 4",
"6 * (9 + 8 + 6 * 8 + (3 * 2 + 4)) + 4",
"(7 * 5) + 4 + 7",
"3 * (6 * 8 + 5 + (8 * 9 * 3 + 7 * 4) + 8) * 3 + 2 * 5",
"(4 * 3 * (7 * 2 + 2 + 6 + 5) * 4 + 8) + 9 * (3 + 2 + (5 * 2)) * (2 + (2 * 9 * 3) * 5 * (7 * 5 + 6 * 2 * 7) + 5 + 5)",
"4 + (6 * 7 * (5 * 7) * 4) * 2 + (4 + 8 * 5) + ((5 * 7 * 4 * 7) + 3 * 5 + (6 + 9 + 3 + 2) + 2 * 5) * 7",
"2 + 4 + ((4 * 4 + 3 + 7 * 4) + 4 + (2 * 5 + 9) + 8 + 4 + 7) + 5 * 5 + 9",
"7 * (7 * 3 + 2 * 9 + 7 + 7) * 3 * 4",
"8 + 4 + 3 + 9 + 8",
"2 + 2 + 6 * (5 + 9 * 3 * 7) * 6",
"(3 * 9 * 4 + 2 * 6) * 8",
"8 + 6 * 4 + (7 + 7 + 8 + 9) * ((2 + 3 + 7 + 6 * 3) + 6 * 6)",
"7 + 9 * 3 * 9",
"((9 + 6) + 7 + 6) + (2 + 5 * 3 * 2 * 7)",
"(8 * 7 + 6 * 6 * 7 + 3) + 5",
"9 * (8 + 3) * 9 + (4 + 8 * (3 + 9 + 5)) * 9",
"9 + (5 * 2 * 4 + 3) * 3 + 6",
"(3 + 7 + 2 + 3) * 3",
"3 * (7 + 3 * 8 * 9 * (5 * 7 * 7 * 5 * 9 * 2) + (3 + 2)) * 7 + (8 + (6 + 9 + 6 * 7)) * 7 + 3",
"(8 * 3 * (2 * 2 + 9 * 2) + 3 + 8) + 8",
"3 + 5 + (6 * 6) + 8 * ((7 + 9 + 5 * 7 + 3 + 9) * 6 * 4 + (3 + 8 * 6 + 6 + 7 * 5) + 9) + 2",
"(3 * 7 + 3) + 3 * (5 + 7 * 5 * 2) + 6 + (9 + 9) * (5 + (9 * 6 + 7 + 5 * 2) + 5)",
"(7 + 9 * 2 + 3) * 5 * 8 * 8",
"7 + 6 * 7 + 2 * ((9 + 2 + 3) + 2 + 2 + 3 + 4)",
"((3 * 4 * 8 + 4 + 5 * 9) + 2 * 2) * 3",
"5 * 4 + 3 + (5 * (6 * 2 + 8) + (4 + 5 + 3 + 2 * 3 * 3) * (7 + 3 + 4 + 4) * 9) + 7",
"9 * (2 * (2 * 7 + 2 * 9 + 4) + 6)",
"4 + (2 + (5 + 6 + 7 + 7 + 9 * 9) * 2 * 4) + (8 + 7 + 4 * 7) * 7 * 5",
"9 * (4 * 3 * 6 + 2)",
"9 * 8 + 4 * 9 + (4 + 7 + 7 + 6 * 2 + 3)",
"5 * (9 * 2 + 8) + 8",
"5 + (8 * 2 + 5 * 9) + 9 * 8 * 2 * 5",
"5 + 2 * 4 + 4",
"(6 * 8 * 9 + 2) + 7 + 5 + 4 * 4 * 8",
"(8 * 4 * 2 + 5 * 5 * (9 + 8 + 7 + 9)) + (9 * 9 * 3 + (4 + 7) + 6) + (8 + 2 + 8 * 5 * (3 * 8)) * 6 + 2 + 9",
"4 + (8 + 3 + 6 + 3) + 8 + 9 * 2",
"(3 * 4 * 2 * 2) + 8 + 7 + 5 + 5",
"5 + (8 * 3 * 6 * (6 + 3 * 8 * 4) * 6) + ((4 * 3 * 7) + 6 + 2 + (2 * 5 * 3 * 8) + (2 + 9 * 5 + 2) + 6) * ((3 + 7) + 5 * 4) + 6 * 2",
"(8 * 4 + 8 + 7 + (6 * 7 * 5 + 4)) + 7 * 8 + 4 + 4 * 6",
"2 * 5 + (6 + 6 + 5 * (2 * 9 + 8 * 4)) + (5 * 2) * 2",
"(8 * 4) * 5 + (7 * 8 * 5 + 6 * 6)",
"7 + 4 + 7 * 8 * (7 * (8 + 5 * 5 + 3 * 7) * 4 * (2 * 2 + 4 * 3)) * 2",
"4 + 2 * 6 * (7 * 7 + 4 * 9 + 2) * 5",
"4 * 5 + 9 * (7 + 6 + 6)",
"(8 * 7 * 7 + 3) + (9 + 3 + 9) * 6 + 4",
"2 * (3 + 4 + (3 + 5 * 3) * 4) * 3 + 4 * (3 * 3 + 3 + 9 + (6 * 9 + 6 + 2 + 8 * 5) + 4)",
"(8 * 7) * (3 + 2 * 4 * 6 * 8 * 6) * 4 + (8 * 3 + 3 + 6) * 2",
"7 * 7 * 4 + 4 * (2 * (4 * 4) + 7 * 5 + (8 + 5 * 3 * 7 * 8 * 9))",
"8 * (9 * 6 + 3)",
"4 + (9 + 4 + 4 * 8 + 2) * 2 + 2 * 8 + 2",
"(6 + 5 + 3 + (6 * 5 + 4 + 3 * 8 * 2) + 7) + 5",
"((2 * 4 * 5 * 2 * 3) + 7 + 6 * 4 + 6) + 4 * (3 + (6 + 3 + 6 * 5 * 6 * 2) * 5 + (3 * 4 * 2 * 9 + 5 * 9) + (3 * 6 * 6 + 4) * 2) + 4 * 7",
"9 * ((6 * 9 * 4) + 9 * (6 * 9 * 4 * 5 * 8 * 3) + 7 + 4) * (3 * 8 + 7 * 6 * (7 + 2 + 9 + 3 * 8 + 6)) * 9",
"8 * 8 + 7 + ((6 + 5 + 5 + 9) + 4 + 3 * (7 + 5 + 8) * 4) * 2 * (4 + (5 + 6) + 7)",
"(4 * 8 * 9) + ((3 * 9 + 8) * 5 + 6 + 9) * 4 * 4",
"5 * 2 + 6 + ((9 * 9 + 2) + (5 * 3 + 2 * 3)) + 6",
"(6 + 6) * 2 + 4 * 8",
"((7 * 5 * 6 + 2) + (9 + 2) + 7) * 4 + 9",
"5 + (5 * 4 + (7 * 9 * 6 + 9) * 2 * 2)",
"8 * (4 * 3 + (4 + 3 * 3 + 6))",
"((3 * 4 + 6 * 4 + 8 * 5) + 9 * 6 + 5 + 9) + 4 + 6 + 4",
"9 * 7 + (8 * 4 * (4 * 8 + 9 + 3) + 9)",
"3 * (3 * 4 * 9 * 2 * 6 * 2)",
"8 + 9 * 6 * 2 * (3 * 3 * 3 + 5 + 8)",
"8 + 9 + 6 + ((3 * 4 + 7) * 9)",
"(5 * (2 * 4 * 8 + 6) * 9 + 8 + (4 * 4 * 5)) * ((9 + 6) + 2) * 8 + 6 + 4 + 9",
"(8 + 7) + 7 + (3 * 6) + 6 + 2 + 9",
"(6 + 4) * 9",
"2 + (2 * 4 + 7 * 3 * 2) * 7",
"9 + 5 + ((6 + 7 + 5 * 7 + 3 + 4) + (7 * 9 * 7 + 6 * 5) * 2 + 6)",
"7 + (4 + (3 * 7 + 9 + 6 + 5 * 2) * (5 + 3 + 5 + 5 * 2 + 7) * 6 + (8 + 7 + 9 * 6 * 3) + 2) + 6 + 6 * (5 * 8 * 5)",
"2 * (9 * 9 * 8 * 8 + (3 * 3 + 3 + 7 + 2)) + ((4 * 7 * 7 + 9) * 4 + 9 + 9 + (6 + 2 + 6))",
"(6 + 6 * 5 * 6 * (7 * 5 * 8 + 3 * 7 + 8) * 9) * 7 + 6 + 2 + 5 * 2",
"2 + 5 + 2 * 5 * 3",
"6 + 6 + (2 + 3 + 7 * 2) * 5 * (3 + (6 * 3))",
"5 * 8 * 4 + (7 * 6)",
"((6 * 3 * 8) + 4 + 9) + 9 + 8 + (8 + 7 * 9 + 5) * 6 + 7",
"6 + 6 + (2 * 8 + 6 + 9 * (6 * 2 * 5 * 2 + 2 + 8) + 7) + (4 * 4 + 7 * 5 * 6 + 8) + 9 + 7",
"9 + 3 + ((9 + 3 * 6 + 3) + 7) + 9 + 4",
"9 + (8 * 9 * 6) + 6 * 6 + (6 + 7 + (3 * 4 * 3 * 7 * 3 + 9) + 3 * (3 * 2 * 6 + 2 * 4 * 3)) + 2",
"4 + 9",
"(9 + 8 * 6 + (8 * 7) + 7) * 8 * 6",
"7 + 5 + 7 + (3 + 6 * 4 * 8 * 8)",
"8 * (8 + 8) * 5 * 9 * 6 * 3",
"7 + 3 + (9 * 8 * 5) + 9",
"9 + 3 + (2 * 4 * 6 * 8 + 9)",
"(8 + 9 + 5 * (5 * 4)) * 6 + 3 * 4 + 7 * 3",
"(6 + 7) * (6 + 3)",
"3 * 5 + (7 * 3 * 6 + 5 + (5 + 7))",
"(9 * 6 + 7 + 5 + 9) + 4 * ((9 * 8 + 8) + 5 * 2 * (4 + 8 * 5) * 4) + 7 + (8 + 9) * 9",
"(9 + 3) + 6 + 3 + 4 * 9 * (4 + 9 * 7)",
"3 * 4 + 7 * 8 + (8 + 8) * (8 * 4 * 8 + 4 * 9)",
"4 + ((4 * 5) + 9) * 8 * 4",
"(6 * (2 * 2 * 3 + 9)) * 7",
"7 * (6 + 2) + 3 * 7 * 2",
"4 + 2 * 9 + (3 * (4 * 2 + 6 + 4) + (7 * 7) * 5) + 6",
"3 + 9 * (4 + 3 * (7 * 9 + 8)) + ((5 * 5) + (6 + 3 + 9) + (2 + 8 * 4) + (8 + 8 + 8 * 7 + 4) * 2 + 6)",
"3 * 9 + 5 * 8 + 7",
"2 + 8 * 9 * ((5 + 9 * 6 + 8 + 6) * 9 + 2 * (5 + 3 * 2 * 5))",
"(3 * 9 + 8 + 2 + (6 + 8 * 9 * 7 * 7 * 5) + 6) * 3 * (8 * 4) + 5 * 4 + 9",
"(3 * 9 * (9 * 8 * 3 * 5 * 2 + 9) * 3) + (6 * (6 + 4 * 8 * 4 + 5) * 3 * (7 + 7))",
"6 + 5 * ((5 * 8 + 8 * 4 + 3 + 9) + 8) + (6 + 2 * (4 * 3 * 3 + 2) + (7 * 5) + 8) + 2",
"((2 + 7 + 8) * 6 * 4) * 8 + 5 * 8 + (3 + 4 + 8) * 8",
"6 + (6 * 7 + 5) * 2 * 2 * 5",
"6 * 2 + ((9 * 5 + 5) + 2)",
"2 * (4 + (7 * 9 + 7 + 4 * 5) * 4 + (2 + 3 + 6 * 5)) + 7 + 7 * 7 + 5",
"(2 + 6 + 7 + (3 + 9)) + ((6 + 2 + 7) + 4)",
"((6 * 3 + 2 + 6) * 7 + 7 * 5 + 3 * 4) + ((5 * 6 * 7 + 9 * 2) * 6 + (2 * 7)) * ((7 + 9) + (2 * 2 + 7 + 2 * 5 * 6) * 8 + (3 * 4 * 6 * 4))",
"5 + 7 * (5 + 4 + 4 * (2 + 3 * 2) + 8)",
"8 + (6 * 4 * 9 * 4) * (3 * 3 + (7 + 6 + 6 * 5 * 4)) * 8 + 4",
"9 * 5 + 9 + ((3 + 9 * 2) + 4 * (6 * 8 + 8 + 8 * 4 + 6) + 4)",
"3 + (2 * 4 + (6 * 4 * 2 + 3 * 2) + (3 * 6 * 6 * 6) + 5) + 5 + 3 + 8 * 5",
"5 * (7 + 6 * (9 * 9) + 4) + (2 + (4 + 6 * 7 * 6 + 2 * 9) * 2 * 9 + 3 * 7) + 5 * 6 * 2",
"4 * 3",
"5 + 9 * ((7 + 2 + 6) * 4 * 2 + 8) + 3 + (7 * 7 + (3 + 4 * 2 + 2 + 4) + 6 * 8)",
"(6 * 7 * 2) * 2 + (9 + 9 + 9 + 3 + 4)",
"(5 + (5 * 5) * 6 + (4 * 5 + 4 * 2 * 8) + 7 + 4) * 4 * 4 * 6 * 5 * 5",
"4 + 9 + 8 + (7 * 8 * 7) + 3",
"3 + 7 + ((8 + 8 + 3 * 4 * 3) * 9 + 2)",
"(4 * 7 * 3 * 5 * (2 * 6)) + 7 * 6 + 8 + 4",
"4 * 7 * 6 * 9 * 9 * 5",
"8 + (5 * 9 * 3 + 8 * 2) * 9 + (6 * (2 * 4) + 9 + 3 + 3)",
"3 + ((3 + 4 + 8 + 4 * 9) + 9 + 8 * 9 + 8) + 2",
"6 + ((2 + 3) * 8 + 9 + (7 + 6 + 5 * 8)) + 8 * 8 + 8 * 4",
"(9 * 5 * 6 + (6 * 3 + 6 + 5 + 2 * 2) * 3 * 9) * 3 * (2 * 6) + 2 * 6 + 9",
"9 * 8 + 6 + 4 + (2 * 6)",
"(8 + 6 + 7 + 3 + 7 + (8 + 6 + 3 + 7 + 3 * 7)) * 7 * (7 + 6 * 4 * (7 + 9)) * 6 + 4",
"((2 * 4 * 2 * 3) + (2 * 9 * 8 + 4) * 3 + (9 + 8)) + 7",
"6 + (6 + 5 * (8 + 7) * (5 + 8 * 3 + 2)) + 4 + 3 * 6",
"6 + 4 + 3 + (7 * (2 + 3 * 8 + 4) + 8 * (2 * 3 * 9) + 3) + 8",
"3 + (8 * (5 * 9) * 4 + (5 + 5 * 7 * 9 + 9)) * 4 * 6",
"3 + ((3 * 4) + 5) * 9 * 5 + 4 * (7 * 9 * 7)",
"2 + 8",
"9 + 5 * 8 + (6 + 8 * 8 * 8 * 9 * 3)",
"((8 * 3) + 2) + (7 + 6)",
"9 * (6 + 9) + 8",
"8 + 3 + 4 + (4 + 9 * 3 * 7 * 9 * 4) * 9",
"(5 + 9 * 6 + 2) * (6 + 5)",
"2 * 7 + (9 * 5 * 2 * 5 * 5) * 3",
"6 + 4 + ((2 + 7 + 5) * (6 * 9 + 2 * 9 + 8 + 2)) + 7",
"9 + 7 + 8 * 7 + ((7 * 9 + 8 + 4 * 4) * 9) * 8",
"3 + (4 + 9 * 3 + 6) * 4",
"((3 + 2 * 6 * 4 * 2) * 8 + (8 * 7) + 2 * 6) + 8",
"((6 * 8 + 2 * 8 * 5 + 5) * 2 + 5) * (4 + 7 + 4 + 2 * 5 + 2) * 4 * (4 * 6 * 8) * 4",
"3 * (5 * 5 * 5 * 5) + 5 + 8 * (2 + 4)",
"8 + 9 * ((8 * 4 + 7 + 5) * 4) * 5",
"5 * (7 * 3 * 8 * 6 * 8 + 6) * 9 + 2 + (3 + (4 + 7 * 9 * 4 + 5) + 3 * 8 * (9 + 8 + 8 + 4 + 2)) + 7",
"5 + 9 * (4 * 7 * 7 + 7 * 5) + 8 + (4 * 3 + 3 + 2)",
"5 + 9 + (8 * 6) + 7 + 7 * (6 * 5 * 3 * 3 + 9 * 5)",
"9 + (6 * 7 * (3 * 4 + 6 + 8 * 7)) + (4 * (2 + 8 * 7 + 5 * 6 * 3)) * 3 * ((7 + 9 + 3 * 4 + 2) + 2 + (7 * 3 + 3 * 7 * 8 + 2) * 4 + 5) * 4",
"2 + 7 * (2 + 2) * 2",
"(2 + 3 + 8 + 2) + 3 + 8 * (8 + 5 + 9 + 6 + 8 * 2)",
"2 * (8 * 5 + 7 + 7 * 3) + 9 + 9",
"3 * (6 * 3 + 5 + 2 * (2 + 2) + 6) * (8 + (7 + 9 * 4) + 7 + 6) + 6 * 2 * 3",
"7 + 4 * (4 + 2 * (8 + 6 * 7 + 3) * 5 * 8) + (8 * 8)",
"(3 * 5) + ((9 + 8 + 2 + 4 * 8 + 2) * 6 * 3 + 5 + 8 + 4) + 5",
"2 + 6 * (7 + 3 * 9 * 7 * 7 + 8) + 9 + 3 + 8",
"((2 + 9 + 6 * 5 * 3) + 9 + (2 + 3 + 3)) + (4 * 6 + 9)",
"(7 + 6) * (7 * 9 + (8 * 3 + 4 + 7) * 2 * 5) + 7 * (4 * 7 * 9 + 2 * 6 * 4) + 9",
"(2 * 6) * 3 * 7 * ((3 + 9) * 9 + (4 * 4 * 6 * 5)) * 4",
"7 * 6 * 5 * 8 + (9 * 4 + 4 + 5)",
"(6 + 7 + 4 * 8 * (6 * 4 * 4 * 8 + 7 * 5)) + 3 + 5 * 5",
"9 + 9 * 3",
"5 + 4 * 5 * 4 * (6 * (7 + 5) + 7 + (8 * 7 + 3 * 5 * 2 + 2) * 7) * 9",
"4 + ((7 + 8 * 8 + 2) + (2 + 4 * 8) + (7 + 9 * 4 * 2) * 2 + 7)",
"4 * 5 + 9 * (7 + 2) + 8",
"((5 * 5 * 3 + 2) + 5 + 6 + (7 * 5 + 7 * 4 * 6 * 6) + 4 + 5) * 5 + (4 + 8 * (8 + 3 * 6 + 7) + 4 * (4 + 6 + 4 * 8 + 7 * 7)) * (9 + 2)",
"(9 * 5 * 7 * (8 * 3 * 6 * 4 + 6) + 8) + (7 * 8) * 2 * (7 + 7 + 5 + 3) * 6",
"4 * (3 + 6 * 4 + 6 + 3)",
"(3 * 7 + 5) + 2 * 2 * 6 * 8",
"7 * (2 + 4 + 3 * 9 * 8) + 3 * (5 * 9) * 5 + 7",
"5 * 7 * 8",
"2 * 3 + (6 + 8 * 9) + 5 + 6",
"(9 + 8 * 8) * ((9 + 9 + 8 + 9 + 7) + 3 + (3 * 6 * 3 + 9 + 8) + 7)",
"((2 + 8 + 9) * 3 + 8 * 2) + 8 + 4 * 2",
"(9 + 6 * 6) * 7 * 8 + ((7 + 9 * 4 * 4) + 8 + 5 * 5)",
"5 + 3 + 3 * 2 + (8 + 8 * 3 + (8 * 6)) * 4",
"8 + 8 * ((8 + 4) + 2 * 7 * 9) * 5",
"(3 + 3 + (4 * 3 * 4 + 6) + 4 * 3 * 4) + 7 * 4 + 4",
"5 + (5 + (9 * 5 + 5) * 9 * (6 * 9)) + 2 + (9 + 8 * (2 + 3 * 8 + 2 * 7) + 7 + 7 + 2)",
"7 + 3 + (6 * 6 * 6)",
"(3 * 4 * 6 * 4 + 5 * 8) * 2 * 5 * 6 + (5 + 3 + (3 + 2)) + (6 * (4 + 3 + 7 + 8) + 4 + 3)",
"(3 * 2 * (4 + 6 * 4) * (3 + 2 + 6 + 5)) + 9",
"8 * 3 * 6 + 3 + 5 + (9 * 3 * 3 + 2 * (5 * 2 + 8 * 9))",
"((7 + 9 + 5 * 2) + (2 * 6 * 8 * 3 + 6) + 2 * (9 + 3 * 5 * 9 * 5 * 2) + 9) + 4 * 6",
"(6 * 7) * (8 + 6 + (7 * 3 + 2)) * 7 + 6",
"3 + 7 + (5 * 5) + 5 * 6",
"3 * 4 * 3 + 8 * 3 + 9",
"(8 * (3 + 9 * 6) * 3 * 6 * (5 * 2)) + 2 * 9 * 4",
"2 * 6 + (9 * 7 + 9) * (8 + 5 * 8 + 7 * (5 + 3 * 5 * 4 * 4))",
"(8 * 7 * 8 * 3 + 9 * 2) + 6 * (3 * 7 * 2)",
"5 + 2 + ((2 + 3 * 3 + 7 + 7 + 9) * (6 * 4 + 4 + 3) + (6 * 6 + 8 * 2 * 9 + 9) * 4)",
"(9 + 4 + 9) + 7",
"2 * (9 * (3 * 7) + 9 + 7 + 2)",
"(8 + 2 + 9 + (7 * 2 + 9 * 8 * 9 * 6)) + 7 + 8 + 8 * 6 + (7 + (4 * 9 + 5 + 4 + 7) + (3 * 9 + 7 * 7 * 7 * 7) + 6)",
"((4 + 2 * 2 * 7 * 6 + 8) + 4 * 7) * (4 * 5 * 3) * (7 * 9 + 2 + 7 * 6 + (7 * 9 * 5)) * 2 + 5",
"6 * (5 * 6 + 4) + 7 * 6 + 6 * 5",
"7 + 6 + 8 * (5 * (7 * 2 * 9) * 2 + (8 + 9 * 5)) * 9",
"7 + 2",
"6 * (6 * 8) + 4 + (3 * 7 + 7 + 6 * 7 * 3) + 9",
"((6 * 4 * 2) * 7 * 4 * 2) * 7 + 6",
"2 * 4 + (7 * 9 + 2 * (9 + 9) + 2) * 8 * 9",
"6 + 5 + (2 + 5 * 5 + 9 * (9 * 5 + 8 * 7 * 8) + 3) * (3 * (2 + 3 + 7 + 2 + 6 * 6)) * 4 * 5",
"(8 * 4 * 8 * 5 + 7) * (3 + 9 * (9 + 9 + 9 * 8) * 9 * 8 + 2)",
"4 * 3 + 3 + 9 * (3 + 9 + 7) + 5",
"3 + (7 * 3 + (5 + 3 * 9)) + (4 + 4 + 2 * 7) * (6 + 2 * 2 + 7 * 6 + 8)",
"4 * (4 * 8 * 8 + 8) + ((8 * 6) + 3 + 4 + 8 + (8 + 5 + 8 * 3 + 7) * (8 * 2 + 2)) * 2 * 8 + 5",
"2 * 2 + 5 * 7 * ((4 + 5 * 5) + 4 * 6 + (3 + 4 * 3 + 2 + 4))",
"(9 + 4) * 6 * 6 * (3 * (4 + 8 * 7 + 4) * 2 + 5 * 8 * 8) * (2 * 6 + (7 + 7 + 9 * 9 * 5) * 2)",
"9 + 9 * 5 + 3 + (8 + 9 + 4 + 5) + 9",
"(4 * 4 + (8 * 4 * 7 * 7 + 7)) + 7",
"3 * 4 * 8 * ((3 + 2 * 2 * 7 * 2) * 7 + (7 + 2 + 6 * 9 + 4 + 2) + 9 + 5 * 4)",
"(8 * (4 + 4 + 4 * 3) * (4 + 9 * 9 + 5) + 8 * 8 * 8) * (5 * 4) + 7",
"(4 + 6 + 2) * 2 + 2",
"9 + ((5 * 3 * 9) * 8 + 9) + 5",
"3 * 2 * (2 + 5 * (2 * 5 * 3) + 3) + (5 + 9 + 8) * 5 * 7",
"((4 * 4 + 8 * 4 * 5 * 5) + 3 + 3 + 5) + 8 * 3 + 3 + 9",
"2 + ((4 + 9 * 2 * 8 * 4 * 4) * 9 + 2 + (6 * 3 + 9) + 8 + 3) + 9 + 2 * 5 + (9 * (6 * 7 * 7))",
"2 * (9 + 4 * (7 + 3 + 3 + 4 * 6 * 5)) + 8 + 9",
"(6 * 9 * 3 + 8 * 9) + 9 * 5",
"6 * (8 + (8 + 3 + 9 * 4) + 6) * 2 * 9 + 6 * 7",
"(8 + 6) + 8 * (9 * 2 * 2) + (4 * (3 + 3 * 5 * 9) + 3 * 4 * 7) + 3 + 5",
"4 * (3 * (7 + 4 * 7) + 2 * 9 + 4 * (4 + 3 + 9 + 3)) + 2 + 3 * 9",
"2 + ((5 + 9) * (6 * 8 + 6 * 8 + 9) + 3)",
"((4 * 7 + 8 + 5 * 9 + 6) * 2 * (3 + 9 * 8 * 8) + (8 * 6 + 2 * 9) + 4 + (9 + 8)) + 5 + 6 * ((4 + 2 + 8 * 5 * 2 + 5) + 4 * 8) * 5 + 8",
"2 + (8 * 9 * 7) + 5 + 6 + 8 * (9 + 4 + 9)",
"(8 + (9 + 5 * 5 * 5 + 9 + 7) + (7 + 4 * 3 * 9 + 6)) + 4 * 5",
"6 * (2 * 2) * (2 * (6 + 4) * 2 * 6 + (4 + 2 * 8 + 4 + 2 * 7) + 4) + (8 * 2 + 8 * 9) + 6",
"7 * 5 * ((2 + 3 * 8 * 8 + 9) * 4 + 3 + 5 * 6) + 3 + 5",
"8 * ((5 + 4 * 6) + 6 * (7 + 5 + 7 + 4 * 9) + 2 * 9 + 2) * (7 + 2 * 6 + (4 * 3) + 8 + 9) + 8 + 5",
"5 * 2",
"4 * 5 + 8 * 3 + (3 + 9 * 3 + (3 * 7 + 4 * 3 + 3 + 5) * 9 * 6) + 3",
"(8 + 7 + 3) * 4 + 7 * ((8 * 9 + 5) * 3 * 6 * 6 + 5) + 4 * 6",
"2 * 7 * 3 * (3 + 3 * 5 + (2 + 6) * 3) + ((5 * 5) * 9 * 9 + 8) + 4",
"6 + 7 * (4 * (6 + 2 + 7 + 7 + 2) * 9 * (3 + 3 + 9 + 4 * 7 * 8)) * 4 * (3 + (8 * 5 + 2 * 7) + 4 + 7 * (7 + 3 * 3) + 5) + 6",
"((8 * 5 * 6 + 4 * 9) + 6 + 2 + 5) * 7 + (4 * 8 * 6 * 7 + (7 * 3 * 3 * 8 + 6) * 7) * 5 + 9 + (3 * 5 * 9 + 2 + (5 + 9 * 6) + (4 + 3 * 8 + 6 * 3 + 3))",
"9 + 9 * 8 + (2 * 8 + 2 * 2) + 2 * (9 * 9 * 8 + 7)",
"4 + 3 + 7 * ((8 + 3) * 3 * 8 + 8)",
"9 * 9 + 8 + (5 * 3) * ((3 * 8 * 5) * 4)",
"5 * 7 * 5 * ((3 + 5 * 4 * 7 + 6 * 6) * 6 + 5) * 6 * 8",
"6 + 2 * 9 + 6 * 2 * ((5 * 5 * 8 * 7 + 2 * 5) * 3 * 6 + 2 * (4 + 7) + (4 * 6 * 7 + 7))",
"(7 * 6 + (8 + 6 * 9)) + 2",
"6 + (3 + 2 * 2 + (9 * 8 * 7 * 7 + 2)) * 9",
"3 + (7 + (9 + 4 * 4) * 8 * 9)",
"((7 + 4 + 9) * (2 * 7 + 7 + 7 + 8) + (2 * 2 * 2 * 9)) + 9 * 6 * 2",
"8 + 3 * ((4 * 8 * 5 * 5) + (8 * 9 * 8 + 7 * 9)) + (4 * 7) + 3 * 4",
"3 * (7 * (6 + 3 + 9) * 3 + (4 * 3 + 8) * 9) + 3 + (4 + 2)",
"((6 * 6 + 3) * 7 + 4 + 2 + 5 + 8) * 8 + (2 + 4) + 7 + 3",
"(5 * 5 + 4 * 9 + 2) * 3 + 9 + 8 * 7 + 8",
"(2 * 9 * (2 + 3)) + (3 * 2 + 2 + 6) + 5 * 2 * (4 + 9 * 7)",
"9 * 7 * (4 * 5 + (5 + 3 * 7 + 5 + 8 * 5))",
"(3 + 6 * 9 * (3 + 2 * 4 + 2 + 3)) + (5 + (8 * 4) * 7) * 5",
"2 + 6 * (6 + 8 + (6 + 8 + 8 * 4 + 3 * 5) * 3 * 5)",
"5 + 8 * (8 + 4 * (2 * 4) * 9 + 8)",
"7 * (3 * (7 + 8 * 4 * 5 * 4 + 3) + 4 * 6 * 8 * 6) + 4",
"4 * 6 + 4 * 8 + (2 + (7 + 4) + 4 * 5 * (5 + 7) + (3 + 2))",
"8 * 2 * (2 + 7)",
"8 * 2 * ((9 * 9 * 4) * 4 + 5 * 9 + (9 * 5 * 9 * 5)) + 3 + 6",
"(6 + 2 * 5 + (4 + 2 * 7 * 4) + 6 + 2) + ((5 + 5 + 8 + 3 * 2 * 8) + 7 * 5 * 3 + 4) * 3 * 8 * (4 * 2 + 5 + 4) * 2",
"5 * 6 + 3 + 4",
"4 + (3 * (3 * 3 * 8 + 8 + 7))",
"6 * 7 + 2 + 2 + 2 * (7 + 6 + 2 + 8 * 9 + 2)",
"(5 + 7 + 5 * (7 + 4) * (2 * 8 + 9 + 8 + 4 + 2) * 4) + 5 * ((3 * 5) + 3) * 3",
"8 + 2 + 5 + 8 + ((5 + 8) + 7) * 2",
"5 * 9 + (6 * (3 + 9 + 3 + 7 * 5 * 2) * 4 + 2 + 3) * 8",
"2 * 2 + (9 + 6 * 5 * 6 * 3) + (6 * 2 * 9)",
"8 * 2 + 3 * 7",
"4 + 6 * 5 + 8 * 7 + 6",
"(2 + 9 * 4 * 9) + 4 * 5 + (3 + 7 * 3 * 6) * ((7 * 9 * 6) + 4 + 8 + 7 + 3) * 6",
"4 * 8 + (5 + (8 + 7 + 2 + 6 * 4) + 9) + 2 + 5",
"((3 + 6) * (8 * 3 * 4 + 4 + 2 * 6) + 5 + 8) + (5 * 7 + (7 + 8 + 8))",
"3 + 8 * 3 + 7 + 4 * 6",
"8 + (8 * 6) * 7 + 7",
"((3 * 3 + 4 * 5) * 2 + 3) * 7 + (9 * 8 * 2 * 4 * 5) * 7 * 5 * 3",
"3 + 9 + (6 * 9 * 2 * 7) * 3 * (9 + 6 + 2 + 8 + 7 * 7) * 5",
"5 * 9 * (8 + 7 + (7 * 2 * 2) + (4 + 2 * 5 + 7)) + 6 + 9 + 9",
"(8 * (7 + 2 + 9 + 8) * 6) * (4 * 6 + 4 * 4 + (2 * 6 + 9 + 7 * 5)) + 5 * (3 * 7 + 2 * (4 + 5 * 5 + 8 * 2 * 9)) * 6 + 9",
"8 + 7 + ((6 * 3) + 6 + 5 * 4 + 7) + 7 + (3 + 7 + 2) + (2 * (5 * 9 * 2 * 6 + 9 + 2) * 2)",
"(4 + 7 + 5 + 9 + 7) + 2 * 7 + 3 + 6 * (8 + 4 + 6 * (7 * 6 * 5 * 6))",
"(8 * 9 + 3) * 9 * 6 * (5 * 6)",
"9 + 8 * 9 * 2 + 8 + 7",
"(5 * (4 + 5) * (8 + 8 * 8) * (6 + 6 * 4 * 7)) * 9 * (7 + 5) + 2 * 6",
"9 + (6 + 3) * (5 * 8 * 3 + (4 * 2 * 7 * 6) + 2 + 9)",
"8 * (3 * 8 + 6 * 4 * 9 * 2) + 8",
"5 + 9 * (5 * 9 + 5 + 8) * 7 + (6 * 7 + 2 * 5) * 4",
"2 + ((4 * 6 + 5 + 6 * 9) * 3 * 8 + (5 * 6 + 5 + 8) + 8 + 7)",
"(7 + 3 + (8 + 2 * 2 * 6) * 3 + 7 + 5) * 8 * 7 * (2 * 8 + (8 * 8) + 9)",
"9 + (8 + 6 + (2 * 8 * 9 * 8 + 2) * 7 * 2 * (7 + 7))",
"2 * 2 + 8 * 9 * (9 * 9 * 3 * 2 * 3 + (9 + 9 + 9 * 6 * 3)) * (9 + 8 + 9)",
"(2 * 4 * 8 * 7) * 7 + 8 * 4 * (8 + 6 * (7 + 2 * 5 * 4 + 9) + 4)",
"2 * (3 * 4) * 5 * 7 + 7 + (5 + 3 + 8 * 3 * 2 + 3)",
"9 + 6 + (3 * (5 * 9 + 2) * 6 * (3 * 5 + 9)) * 6",
"5 * 2 + ((5 + 7 * 5 + 2) + 6 + 7 * (3 * 3 + 6 * 6) + 7 * 7)",
"7 * 5 + 3 * 5",
"2 * 7 * 8 + 7 * (2 * 4 * (6 * 6 + 9 * 2 + 3))",
"(4 + (4 + 9 * 6 + 9 * 2 + 2) + (9 * 6 + 6 + 4 + 6)) * (3 + 9) * 8 + 2 + 8",
"2 + 5 + 3 * 4 * 4 * (5 * 4 * 5)",
"((2 * 9 * 6) * 5 * 9 * 2 * 9) + 9 + 5",
"3 + 3 + 4 + 8 + 3",
"2 + (8 * 2 + 7 + (4 + 4 + 5 + 6 + 2 * 9) + 3 * 7) + 4",
"(2 * (3 * 4 * 4 + 4) + 6 * 3) + 5 + 3 * (3 + 6 + (2 + 4 * 9) * 6 + 2) + 7 * (8 * 6 + 5 * 3)",
"6 * 4 + (4 * (3 + 9 + 2) + (3 * 2 * 3 + 2 * 9 * 4) * 2 * 2 + 9) * 8 + 4 * 9",
"((2 + 9 * 6) + 9 * 3 + (6 + 7) * 6) + (6 * 7 + 5) * 2 + 2 + 8 + 9",
"9 * 8 + 2 * 4 * ((2 + 7 + 3) + (2 + 7 * 2) * 3) * 8",
"2 + 2 * 2 * 3 * (5 * 3 * 8 * 3 * (4 + 8 * 8) + 5)",
"(6 + 5 * 5) + 8 * 5 + 8",
"4 + 2 + 4 * 4 * 5 + ((5 * 7 + 7) * 6 + 2 * (3 * 3 * 3 + 7) + 6 + 7)",
"2 + 4 * 3",
"9 + 9 + (4 * (9 * 3 * 8 + 8 + 8 * 5) * 4 * 3 + 9 * (7 + 3 * 9 + 5 * 7 * 3)) * 6 + 2",
"(4 + 2 + 6 + 9 + 3 * 8) * 4 + (9 + 7 * 6 * 8 + 5 * 2) * 2 + 7 * (4 * 4)",
"(2 + 2) * (3 * 2 + 5 + 2 + 6) * 9",
"9 + 4 + 6 * 6 + 6 * (4 * (5 * 7 + 2 + 7 + 9) * 7 + 4 * (4 * 7 + 9 + 5))",
"9 * 8 + 4 * 2 + (2 * 5 * 8 * (3 * 5 + 9 + 3 * 3)) * 3",
"(3 + 9) + 4 + 6 * 3 * (9 * 7 * 3 + 4 + (9 * 4) + 3) * (5 + 6 + 6)",
"7 * 8 + 6 + (4 * 8 * 7 * 7 * (8 + 3 * 5 + 9 * 7 + 5)) * 4",
"7 * ((7 + 7 * 9 + 8 * 8 + 2) + 6 + (2 * 7 + 9)) + 6 * 6 * 6",
"(7 + 3 * 9 * (8 + 4 * 8 * 9 * 7 * 9)) + (9 * (8 + 7 * 4 * 2 * 7 * 2) * 9 * 5) + (8 * 5 + 8 + (8 + 6)) + ((5 * 5 + 2) * 7)",
"8 * 3 + 3 + 7 * (3 * 5 * (3 * 3)) * (4 * 3)",
"9 + 8 * 2 + 6 + ((7 * 2 * 3) * 6 + 7 * (6 * 7) + 6) + 3",
"(2 * 2 * (9 * 4 * 9 + 7 * 4 * 6) + 8 * 9 + 6) * 4 + 4 + 8 * (6 * (9 + 7 * 5 + 5 * 3) + 8 * (8 * 6)) * (3 + 5 * 7 + 2 + 3)",
"3 + ((4 + 9 + 5 + 8 + 9 + 3) + 6)",
"5 + 3 * ((2 * 3) * 3 * 7 * 6)",
"6 * ((4 + 9 * 4) * (6 * 8 * 3 * 7 + 4) * 2 + 9 + 5 + 5) * 7 + (3 + 9 * 7 + 9) + (3 * (5 * 9 + 8) * 7 + 7 + 6)",
"(9 + 9 + (7 * 2 * 2 + 8 + 9) * (3 * 4) * 6) + 4",
"4 * 6 + 4 + 2 * 3 + (8 * 6 * 5 + 3)",
"3 * ((6 * 9 + 4 * 7) + 8 + 8 + 7 * (7 + 5 * 6 + 3 * 6 * 2)) * (9 + (5 * 8) * 6 * (8 * 2 * 2 + 2) * (2 + 5 * 4 + 4))",
"8 * 6 * 6 + 8 * (8 + (6 * 4 + 7 + 3 + 5 + 2) + 9 + 4)",
"(8 * (5 + 2 * 9 * 3 + 6) + 2 * 3 + 3 * 4) + 8 * (9 * 3 + (3 + 7) * 6 + 6 * 8) * 4",
"9 + 5 + (8 + (8 + 2 + 4 + 6 * 8 * 7) * (9 + 4 * 6 * 4 + 6) * 7 + 3 + 7) + 4 + (3 + 5)",
"5 + (9 + 9 * (4 + 7 + 2 + 9 * 7 * 6) + 3 * 9) + (9 * 4 + 3 * (4 * 9 + 4 * 3 * 4 + 2)) * (9 + 7 + 7 * 8 * 4) + 9 + ((7 + 2 * 5 + 5 + 8) * 2 * (6 + 9 * 3 + 9))",
"5 + ((3 * 7 * 4 * 5 * 6) + 3 + 8 + 5 + 6) * 8 + 9",
"8 + 5 + 9 * 8 * 8",
"4 + (9 * (4 + 8 + 9 + 5) + 4 * 6 + 4 + 4) + (8 * (3 * 8 + 7 * 3 + 9)) + 4",
"2 + 7 * (3 * 4 + 8) * 8 * (2 + 6 + 5 + 3 + (6 + 7 + 9 * 8 * 6 + 5) + 2) + 6",
"(2 * (3 * 5 + 6 * 3) * 7 + (7 * 2 + 5 + 8 + 6) * 8) * ((4 + 5 * 2) + 8)",
"(4 * 6 + 7 + 8 + (7 + 9 + 7 + 7 * 5 * 9) + 5) * 9 + 9 + 4",
"6 + 3 + 4 + (7 + (8 + 6 * 3 + 6 + 7 + 2) + 5)",
"9 + 3 + (3 + 6 * 4 + 6) * 8",
"6 + 6 * (2 + 5 + 5 + (3 * 5) + (9 * 4 + 9 * 5 + 3 * 7)) + 5 + 8",
"4 * (8 * 8 + 8) * 9 + 4 * 8 + (8 + 5 * (4 + 8 + 4) * 3 * 9)",
"7 * ((7 + 7 * 9 + 5 * 2 * 2) * (2 * 4 + 7 * 3 + 8)) + 5 + (5 * 5) * (7 * 9 + (7 + 6 + 2 * 3 * 4 * 9)) + 5",
"6 * 4 + 3 + 9 * (9 * 2) + 7",
"9 + 7 * ((9 * 2 + 5 * 8 + 6) + 7)",
"(5 + 3 + (5 + 4 * 4 + 9)) * (6 * 5 + (6 + 6 + 7 + 9 + 3 * 8) * 8 + 2 + 3)",
"9 + 2 + 7",
"6 * (7 * (3 * 5 + 9 * 8 * 3) * 4) * 2",
"9 + 7 * (5 + (8 + 5))",
"2 * 9 + 3",
"(5 + (7 + 8) * (7 * 7 * 8 * 7 * 8 + 3) + (7 * 9 + 4 + 2 * 5)) + 6 + (2 * 5 + (3 + 2 * 2 + 9 + 3) + 5) * 8 + 9 + 7",
"(5 * 3) * (5 + 4 * 5 + 6) + 2 * (2 + 5 + 8) * 6",
"7 + 3 + 6 * ((3 + 3) + 8) + 5 + 7",
"9 * 9 + (9 * 4 * (2 * 4 + 4 + 4 * 8 + 9) + 5)",
"4 * 7 + 8 + (6 + (9 * 3) * 3 + 6) * 3 * 9",
"((3 + 9 + 6 + 6) * 9 * 2 * 3 + 3) + 9 * 2 * ((2 + 2 + 3 * 7 * 2 * 4) * 8 * (6 + 8) + 9 + 4) + 8 * 2",
"((4 + 8) * (7 * 3 + 2) * 9 * 9 * 5) + (5 + 4 + 7 + 4) * 6",
"5 * 2 + (9 + 2 + 8 + 3) + ((6 * 7 * 8 * 6 + 5 + 6) + 2 * (5 + 9 * 7 * 8 + 6))",
"4 + 7 + 3 + ((5 + 5 + 3 + 2 + 2 + 8) + (9 * 8 + 3 * 4 + 9 * 9))",
"((9 * 7 * 8 + 2 + 6 * 3) * 8 * 8 + 7) + 6 * (7 * (4 + 4 * 5 + 7 * 9) + 8 + 5) * 9 + 9 + 6",
"9 + 5 * 6 * 2 + (6 + 5 + (2 * 2 * 5 * 8 * 3 * 9))",
"8 + 3 + (4 * 8 + 7) + ((9 + 8 + 8) * 6 * 8) + (6 + 9 * 9 * 7 * (7 + 8 + 6) * 3)",
"2 * (7 * 3 + 8 * 6 + 8) * 8 * 6 * (4 + 5)",
"5 * (6 + 2 * 9) + (7 + 6) + 8 * 5",
"(4 * (6 + 9 + 3 + 6 + 2)) * 8 * 3 * 2",
"4 * 3 * (9 + 5 * 5 + (5 + 6 * 2 + 7) + 7 + 3) * 5 * 6",
"6 + 7 + (5 + 3 * 2 + 3 * 7 * 2)",
"7 + (4 + 3 * 3 * 9 * 9) + 8 + 4 + 2",
"((4 * 3 * 5 * 8) * 9 + 7) * 8 * 7",
"3 * 8 * (5 * 6) + 2 * 5 + 9",
"((8 + 2 * 4) * 7 + 8) * 8 * 6",
"(3 + 4) + 5 * 4 * 9 + 7",
"(7 * 4 * 3 + (5 + 6 + 2 + 4 * 7) * 5) * 5 + 2 + 8 * 6",
]
}
